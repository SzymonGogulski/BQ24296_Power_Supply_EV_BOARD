
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005580  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005720  08005720  00006720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f0  080057f0  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080057f0  080057f0  000067f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057f8  080057f8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057f8  080057f8  000067f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057fc  080057fc  000067fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005800  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  08005868  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08005868  00007278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1a0  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f43  00000000  00000000  00013238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00015180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a5  00000000  00000000  00015ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f8e  00000000  00000000  0001654d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e419  00000000  00000000  0002d4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a560  00000000  00000000  0003b8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5e54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000355c  00000000  00000000  000c5e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000c93f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005708 	.word	0x08005708

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005708 	.word	0x08005708

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d013      	beq.n	80005ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00b      	beq.n	80005ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	e000      	b.n	80005d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f9      	beq.n	80005d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <_write>:
#include "main.h"
#include <stdio.h>

int counter = 0;

int _write(int file, char *ptr, int len){
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
	int i=0;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++){
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	e009      	b.n	8000624 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	60ba      	str	r2, [r7, #8]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ffc7 	bl	80005ac <ITM_SendChar>
	for (i=0; i<len; i++){
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	3301      	adds	r3, #1
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	697a      	ldr	r2, [r7, #20]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	429a      	cmp	r2, r3
 800062a:	dbf1      	blt.n	8000610 <_write+0x16>
	}
	return len;
 800062c:	687b      	ldr	r3, [r7, #4]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <user_code_2>:

void user_code_2(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

    // Check if device powered up or woke up from standby
    if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET){                              // device woke up
 800063e:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <user_code_2+0x88>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	2b02      	cmp	r3, #2
 8000648:	d12a      	bne.n	80006a0 <user_code_2+0x68>
        
        printf("Woke up from STANDBY\n");
 800064a:	481e      	ldr	r0, [pc, #120]	@ (80006c4 <user_code_2+0x8c>)
 800064c:	f004 f9fa 	bl	8004a44 <puts>
        __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8000650:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <user_code_2+0x88>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a1a      	ldr	r2, [pc, #104]	@ (80006c0 <user_code_2+0x88>)
 8000656:	f043 0308 	orr.w	r3, r3, #8
 800065a:	6013      	str	r3, [r2, #0]
        HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 800065c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000660:	f002 fd10 	bl	8003084 <HAL_PWR_DisableWakeUpPin>

        for (int i=0;i<10;i++){
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	e016      	b.n	8000698 <user_code_2+0x60>
            HAL_Delay(300);
 800066a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800066e:	f000 fc35 	bl	8000edc <HAL_Delay>
            HAL_GPIO_WritePin(GPIOC, LED_Pin, GPIO_PIN_SET);                // Drive PC13 HIGH -> LED OFF
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000678:	4813      	ldr	r0, [pc, #76]	@ (80006c8 <user_code_2+0x90>)
 800067a:	f000 ffa1 	bl	80015c0 <HAL_GPIO_WritePin>
            HAL_Delay(300);
 800067e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000682:	f000 fc2b 	bl	8000edc <HAL_Delay>
            HAL_GPIO_WritePin(GPIOC, LED_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800068c:	480e      	ldr	r0, [pc, #56]	@ (80006c8 <user_code_2+0x90>)
 800068e:	f000 ff97 	bl	80015c0 <HAL_GPIO_WritePin>
        for (int i=0;i<10;i++){
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3301      	adds	r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b09      	cmp	r3, #9
 800069c:	dde5      	ble.n	800066a <user_code_2+0x32>
 800069e:	e002      	b.n	80006a6 <user_code_2+0x6e>
        }
    } else {                                                                    // device powered up
        printf("Device powered up\n");
 80006a0:	480a      	ldr	r0, [pc, #40]	@ (80006cc <user_code_2+0x94>)
 80006a2:	f004 f9cf 	bl	8004a44 <puts>
    }

    HAL_GPIO_WritePin(GPIOB, EN5V_Pin, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006ac:	4808      	ldr	r0, [pc, #32]	@ (80006d0 <user_code_2+0x98>)
 80006ae:	f000 ff87 	bl	80015c0 <HAL_GPIO_WritePin>
    printf("Going into main loop\n");
 80006b2:	4808      	ldr	r0, [pc, #32]	@ (80006d4 <user_code_2+0x9c>)
 80006b4:	f004 f9c6 	bl	8004a44 <puts>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40007000 	.word	0x40007000
 80006c4:	08005720 	.word	0x08005720
 80006c8:	40020800 	.word	0x40020800
 80006cc:	08005738 	.word	0x08005738
 80006d0:	40020400 	.word	0x40020400
 80006d4:	0800574c 	.word	0x0800574c

080006d8 <user_code_3>:

void user_code_3(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
    // Pooling OFF pin
    if (HAL_GPIO_ReadPin(GPIOA, OFF_Pin) == GPIO_PIN_SET){
 80006de:	2102      	movs	r1, #2
 80006e0:	482c      	ldr	r0, [pc, #176]	@ (8000794 <user_code_3+0xbc>)
 80006e2:	f000 ff55 	bl	8001590 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d132      	bne.n	8000752 <user_code_3+0x7a>

        printf("Going to STANDBY ...\n");
 80006ec:	482a      	ldr	r0, [pc, #168]	@ (8000798 <user_code_3+0xc0>)
 80006ee:	f004 f9a9 	bl	8004a44 <puts>

        for (int i = 0; i < 60; i++){
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	e014      	b.n	8000722 <user_code_3+0x4a>
        HAL_Delay(50);
 80006f8:	2032      	movs	r0, #50	@ 0x32
 80006fa:	f000 fbef 	bl	8000edc <HAL_Delay>
        HAL_GPIO_WritePin(GPIOC, LED_Pin, GPIO_PIN_SET); // Drive PC13 HIGH -> LED OFF
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000704:	4825      	ldr	r0, [pc, #148]	@ (800079c <user_code_3+0xc4>)
 8000706:	f000 ff5b 	bl	80015c0 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800070a:	2032      	movs	r0, #50	@ 0x32
 800070c:	f000 fbe6 	bl	8000edc <HAL_Delay>
        HAL_GPIO_WritePin(GPIOC, LED_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000716:	4821      	ldr	r0, [pc, #132]	@ (800079c <user_code_3+0xc4>)
 8000718:	f000 ff52 	bl	80015c0 <HAL_GPIO_WritePin>
        for (int i = 0; i < 60; i++){
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3301      	adds	r3, #1
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b3b      	cmp	r3, #59	@ 0x3b
 8000726:	dde7      	ble.n	80006f8 <user_code_3+0x20>
        }

        HAL_GPIO_WritePin(GPIOB, EN5V_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800072e:	481c      	ldr	r0, [pc, #112]	@ (80007a0 <user_code_3+0xc8>)
 8000730:	f000 ff46 	bl	80015c0 <HAL_GPIO_WritePin>
        __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <user_code_3+0xcc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a1a      	ldr	r2, [pc, #104]	@ (80007a4 <user_code_3+0xcc>)
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	6013      	str	r3, [r2, #0]
        HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000740:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000744:	f002 fc8c 	bl	8003060 <HAL_PWR_EnableWakeUpPin>
        printf("STANBY mode\n");
 8000748:	4817      	ldr	r0, [pc, #92]	@ (80007a8 <user_code_3+0xd0>)
 800074a:	f004 f97b 	bl	8004a44 <puts>
        HAL_PWR_EnterSTANDBYMode();
 800074e:	f002 fcad 	bl	80030ac <HAL_PWR_EnterSTANDBYMode>
    }

    if (HAL_GPIO_ReadPin(GPIOB, REACT_Pin) == GPIO_PIN_SET) {
 8000752:	2102      	movs	r1, #2
 8000754:	4812      	ldr	r0, [pc, #72]	@ (80007a0 <user_code_3+0xc8>)
 8000756:	f000 ff1b 	bl	8001590 <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d110      	bne.n	8000782 <user_code_3+0xaa>

        HAL_GPIO_WritePin(GPIOB, TRIG_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2104      	movs	r1, #4
 8000764:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <user_code_3+0xc8>)
 8000766:	f000 ff2b 	bl	80015c0 <HAL_GPIO_WritePin>
        counter++;
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <user_code_3+0xd4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	4a0e      	ldr	r2, [pc, #56]	@ (80007ac <user_code_3+0xd4>)
 8000772:	6013      	str	r3, [r2, #0]
        printf("Current counter value: %d \n", counter);
 8000774:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <user_code_3+0xd4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	480d      	ldr	r0, [pc, #52]	@ (80007b0 <user_code_3+0xd8>)
 800077c:	f004 f8fa 	bl	8004974 <iprintf>
    } else {
        HAL_GPIO_WritePin(GPIOB, TRIG_Pin, GPIO_PIN_RESET);
    }

}
 8000780:	e004      	b.n	800078c <user_code_3+0xb4>
        HAL_GPIO_WritePin(GPIOB, TRIG_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2104      	movs	r1, #4
 8000786:	4806      	ldr	r0, [pc, #24]	@ (80007a0 <user_code_3+0xc8>)
 8000788:	f000 ff1a 	bl	80015c0 <HAL_GPIO_WritePin>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40020000 	.word	0x40020000
 8000798:	08005764 	.word	0x08005764
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020400 	.word	0x40020400
 80007a4:	40007000 	.word	0x40007000
 80007a8:	0800577c 	.word	0x0800577c
 80007ac:	20000084 	.word	0x20000084
 80007b0:	08005788 	.word	0x08005788

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b8:	f000 fb1e 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007bc:	f000 f80c 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f000 f8c0 	bl	8000944 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007c4:	f000 f866 	bl	8000894 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007c8:	f000 f892 	bl	80008f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  user_code_2();
 80007cc:	f7ff ff34 	bl	8000638 <user_code_2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    user_code_3();
 80007d0:	f7ff ff82 	bl	80006d8 <user_code_3>
 80007d4:	e7fc      	b.n	80007d0 <main+0x1c>
	...

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	@ 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2230      	movs	r2, #48	@ 0x30
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 fa0c 	bl	8004c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	4b22      	ldr	r3, [pc, #136]	@ (800088c <SystemClock_Config+0xb4>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	4a21      	ldr	r2, [pc, #132]	@ (800088c <SystemClock_Config+0xb4>)
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800080a:	6413      	str	r3, [r2, #64]	@ 0x40
 800080c:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <SystemClock_Config+0xb4>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <SystemClock_Config+0xb8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <SystemClock_Config+0xb8>)
 8000822:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <SystemClock_Config+0xb8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	2302      	movs	r3, #2
 8000836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2310      	movs	r3, #16
 800083e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000840:	2300      	movs	r3, #0
 8000842:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4618      	mov	r0, r3
 800084a:	f002 fc47 	bl	80030dc <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000854:	f000 f8fa 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	230f      	movs	r3, #15
 800085a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f002 feaa 	bl	80035cc <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800087e:	f000 f8e5 	bl	8000a4c <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	@ 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_I2C1_Init+0x50>)
 800089a:	4a13      	ldr	r2, [pc, #76]	@ (80008e8 <MX_I2C1_Init+0x54>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008a0:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <MX_I2C1_Init+0x58>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008d2:	f000 fe8f 	bl	80015f4 <HAL_I2C_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 f8b6 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000088 	.word	0x20000088
 80008e8:	40005400 	.word	0x40005400
 80008ec:	000186a0 	.word	0x000186a0

080008f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <MX_USART1_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 8000928:	f003 f830 	bl	800398c <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f88b 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000dc 	.word	0x200000dc
 8000940:	40011000 	.word	0x40011000

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b37      	ldr	r3, [pc, #220]	@ (8000a3c <MX_GPIO_Init+0xf8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a36      	ldr	r2, [pc, #216]	@ (8000a3c <MX_GPIO_Init+0xf8>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b34      	ldr	r3, [pc, #208]	@ (8000a3c <MX_GPIO_Init+0xf8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b30      	ldr	r3, [pc, #192]	@ (8000a3c <MX_GPIO_Init+0xf8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a3c <MX_GPIO_Init+0xf8>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b2d      	ldr	r3, [pc, #180]	@ (8000a3c <MX_GPIO_Init+0xf8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b29      	ldr	r3, [pc, #164]	@ (8000a3c <MX_GPIO_Init+0xf8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a28      	ldr	r2, [pc, #160]	@ (8000a3c <MX_GPIO_Init+0xf8>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b26      	ldr	r3, [pc, #152]	@ (8000a3c <MX_GPIO_Init+0xf8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b4:	4822      	ldr	r0, [pc, #136]	@ (8000a40 <MX_GPIO_Init+0xfc>)
 80009b6:	f000 fe03 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG_Pin|EN5V_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f241 0104 	movw	r1, #4100	@ 0x1004
 80009c0:	4820      	ldr	r0, [pc, #128]	@ (8000a44 <MX_GPIO_Init+0x100>)
 80009c2:	f000 fdfd 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	4818      	ldr	r0, [pc, #96]	@ (8000a40 <MX_GPIO_Init+0xfc>)
 80009e0:	f000 fc52 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : OFF_Pin */
  GPIO_InitStruct.Pin = OFF_Pin;
 80009e4:	2302      	movs	r3, #2
 80009e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(OFF_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	4814      	ldr	r0, [pc, #80]	@ (8000a48 <MX_GPIO_Init+0x104>)
 80009f8:	f000 fc46 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_Pin REACT_Pin */
  GPIO_InitStruct.Pin = DISP_Pin|REACT_Pin;
 80009fc:	2303      	movs	r3, #3
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480d      	ldr	r0, [pc, #52]	@ (8000a44 <MX_GPIO_Init+0x100>)
 8000a10:	f000 fc3a 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin EN5V_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|EN5V_Pin;
 8000a14:	f241 0304 	movw	r3, #4100	@ 0x1004
 8000a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <MX_GPIO_Init+0x100>)
 8000a2e:	f000 fc2b 	bl	8001288 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40020400 	.word	0x40020400
 8000a48:	40020000 	.word	0x40020000

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <Error_Handler+0x8>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a66:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b3c <HAL_I2C_MspInit+0x94>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d133      	bne.n	8000b32 <HAL_I2C_MspInit+0x8a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <HAL_I2C_MspInit+0x98>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b40 <HAL_I2C_MspInit+0x98>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <HAL_I2C_MspInit+0x98>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ae6:	23c0      	movs	r3, #192	@ 0xc0
 8000ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aea:	2312      	movs	r3, #18
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af6:	2304      	movs	r3, #4
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4810      	ldr	r0, [pc, #64]	@ (8000b44 <HAL_I2C_MspInit+0x9c>)
 8000b02:	f000 fbc1 	bl	8001288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <HAL_I2C_MspInit+0x98>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b40 <HAL_I2C_MspInit+0x98>)
 8000b10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b16:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <HAL_I2C_MspInit+0x98>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	201f      	movs	r0, #31
 8000b28:	f000 fad7 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b2c:	201f      	movs	r0, #31
 8000b2e:	f000 faf0 	bl	8001112 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	@ 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020400 	.word	0x40020400

08000b48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a1d      	ldr	r2, [pc, #116]	@ (8000bdc <HAL_UART_MspInit+0x94>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d134      	bne.n	8000bd4 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <HAL_UART_MspInit+0x98>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	4a1b      	ldr	r2, [pc, #108]	@ (8000be0 <HAL_UART_MspInit+0x98>)
 8000b74:	f043 0310 	orr.w	r3, r3, #16
 8000b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <HAL_UART_MspInit+0x98>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	f003 0310 	and.w	r3, r3, #16
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <HAL_UART_MspInit+0x98>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a14      	ldr	r2, [pc, #80]	@ (8000be0 <HAL_UART_MspInit+0x98>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_UART_MspInit+0x98>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ba2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4809      	ldr	r0, [pc, #36]	@ (8000be4 <HAL_UART_MspInit+0x9c>)
 8000bc0:	f000 fb62 	bl	8001288 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2025      	movs	r0, #37	@ 0x25
 8000bca:	f000 fa86 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bce:	2025      	movs	r0, #37	@ 0x25
 8000bd0:	f000 fa9f 	bl	8001112 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	@ 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40011000 	.word	0x40011000
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <NMI_Handler+0x4>

08000bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <MemManage_Handler+0x4>

08000c00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3e:	f000 f92d 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <I2C1_EV_IRQHandler+0x10>)
 8000c4e:	f000 fe2a 	bl	80018a6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000088 	.word	0x20000088

08000c5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <USART1_IRQHandler+0x10>)
 8000c62:	f002 fee3 	bl	8003a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000dc 	.word	0x200000dc

08000c70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e00a      	b.n	8000c98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c82:	f3af 8000 	nop.w
 8000c86:	4601      	mov	r1, r0
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	60ba      	str	r2, [r7, #8]
 8000c8e:	b2ca      	uxtb	r2, r1
 8000c90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3301      	adds	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dbf0      	blt.n	8000c82 <_read+0x12>
  }

  return len;
 8000ca0:	687b      	ldr	r3, [r7, #4]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cd2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_isatty>:

int _isatty(int file)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d1c:	4a14      	ldr	r2, [pc, #80]	@ (8000d70 <_sbrk+0x5c>)
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <_sbrk+0x60>)
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d28:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <_sbrk+0x64>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <_sbrk+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d207      	bcs.n	8000d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d44:	f003 ffac 	bl	8004ca0 <__errno>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	e009      	b.n	8000d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	@ (8000d78 <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a05      	ldr	r2, [pc, #20]	@ (8000d78 <_sbrk+0x64>)
 8000d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20020000 	.word	0x20020000
 8000d74:	00000400 	.word	0x00000400
 8000d78:	20000124 	.word	0x20000124
 8000d7c:	20000278 	.word	0x20000278

08000d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <SystemInit+0x20>)
 8000d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d8a:	4a05      	ldr	r2, [pc, #20]	@ (8000da0 <SystemInit+0x20>)
 8000d8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ddc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da8:	f7ff ffea 	bl	8000d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	@ (8000de4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000df0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f003 ff6b 	bl	8004cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fced 	bl	80007b4 <main>
  bx  lr    
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000de8:	08005800 	.word	0x08005800
  ldr r2, =_sbss
 8000dec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000df0:	20000278 	.word	0x20000278

08000df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <HAL_Init+0x40>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <HAL_Init+0x40>)
 8000e0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	@ (8000e38 <HAL_Init+0x40>)
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f94f 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	200f      	movs	r0, #15
 8000e28:	f000 f808 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fe14 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023c00 	.word	0x40023c00

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f967 	bl	800112e <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f92f 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000128 	.word	0x20000128

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000128 	.word	0x20000128

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008

08000f24 <__NVIC_SetPriorityGrouping>:
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_GetPriorityGrouping>:
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	@ (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	@ (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	@ (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	@ 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff29 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff3e 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff8e 	bl	8001018 <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff31 	bl	8000f88 <__NVIC_EnableIRQ>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffa2 	bl	8001080 <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001152:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff feb6 	bl	8000ec4 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d008      	beq.n	8001178 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2280      	movs	r2, #128	@ 0x80
 800116a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e052      	b.n	800121e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0216 	bic.w	r2, r2, #22
 8001186:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001196:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	2b00      	cmp	r3, #0
 800119e:	d103      	bne.n	80011a8 <HAL_DMA_Abort+0x62>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d007      	beq.n	80011b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0208 	bic.w	r2, r2, #8
 80011b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0201 	bic.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c8:	e013      	b.n	80011f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ca:	f7ff fe7b 	bl	8000ec4 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	d90c      	bls.n	80011f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2220      	movs	r2, #32
 80011dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2203      	movs	r2, #3
 80011e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e015      	b.n	800121e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1e4      	bne.n	80011ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001204:	223f      	movs	r2, #63	@ 0x3f
 8001206:	409a      	lsls	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d004      	beq.n	8001244 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2280      	movs	r2, #128	@ 0x80
 800123e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e00c      	b.n	800125e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2205      	movs	r2, #5
 8001248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0201 	bic.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001278:	b2db      	uxtb	r3, r3
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	e159      	b.n	8001558 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a4:	2201      	movs	r2, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	429a      	cmp	r2, r3
 80012be:	f040 8148 	bne.w	8001552 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d005      	beq.n	80012da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d130      	bne.n	800133c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001310:	2201      	movs	r2, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f003 0201 	and.w	r2, r3, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b03      	cmp	r3, #3
 8001346:	d017      	beq.n	8001378 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d123      	bne.n	80013cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	08da      	lsrs	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3208      	adds	r2, #8
 800138c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	69b9      	ldr	r1, [r7, #24]
 80013c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0203 	and.w	r2, r3, #3
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a2 	beq.w	8001552 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b57      	ldr	r3, [pc, #348]	@ (8001570 <HAL_GPIO_Init+0x2e8>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	4a56      	ldr	r2, [pc, #344]	@ (8001570 <HAL_GPIO_Init+0x2e8>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800141c:	6453      	str	r3, [r2, #68]	@ 0x44
 800141e:	4b54      	ldr	r3, [pc, #336]	@ (8001570 <HAL_GPIO_Init+0x2e8>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142a:	4a52      	ldr	r2, [pc, #328]	@ (8001574 <HAL_GPIO_Init+0x2ec>)
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a49      	ldr	r2, [pc, #292]	@ (8001578 <HAL_GPIO_Init+0x2f0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d019      	beq.n	800148a <HAL_GPIO_Init+0x202>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a48      	ldr	r2, [pc, #288]	@ (800157c <HAL_GPIO_Init+0x2f4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d013      	beq.n	8001486 <HAL_GPIO_Init+0x1fe>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a47      	ldr	r2, [pc, #284]	@ (8001580 <HAL_GPIO_Init+0x2f8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d00d      	beq.n	8001482 <HAL_GPIO_Init+0x1fa>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a46      	ldr	r2, [pc, #280]	@ (8001584 <HAL_GPIO_Init+0x2fc>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d007      	beq.n	800147e <HAL_GPIO_Init+0x1f6>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a45      	ldr	r2, [pc, #276]	@ (8001588 <HAL_GPIO_Init+0x300>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d101      	bne.n	800147a <HAL_GPIO_Init+0x1f2>
 8001476:	2304      	movs	r3, #4
 8001478:	e008      	b.n	800148c <HAL_GPIO_Init+0x204>
 800147a:	2307      	movs	r3, #7
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x204>
 800147e:	2303      	movs	r3, #3
 8001480:	e004      	b.n	800148c <HAL_GPIO_Init+0x204>
 8001482:	2302      	movs	r3, #2
 8001484:	e002      	b.n	800148c <HAL_GPIO_Init+0x204>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x204>
 800148a:	2300      	movs	r3, #0
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	f002 0203 	and.w	r2, r2, #3
 8001492:	0092      	lsls	r2, r2, #2
 8001494:	4093      	lsls	r3, r2
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149c:	4935      	ldr	r1, [pc, #212]	@ (8001574 <HAL_GPIO_Init+0x2ec>)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3302      	adds	r3, #2
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014aa:	4b38      	ldr	r3, [pc, #224]	@ (800158c <HAL_GPIO_Init+0x304>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ce:	4a2f      	ldr	r2, [pc, #188]	@ (800158c <HAL_GPIO_Init+0x304>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d4:	4b2d      	ldr	r3, [pc, #180]	@ (800158c <HAL_GPIO_Init+0x304>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f8:	4a24      	ldr	r2, [pc, #144]	@ (800158c <HAL_GPIO_Init+0x304>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014fe:	4b23      	ldr	r3, [pc, #140]	@ (800158c <HAL_GPIO_Init+0x304>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001522:	4a1a      	ldr	r2, [pc, #104]	@ (800158c <HAL_GPIO_Init+0x304>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <HAL_GPIO_Init+0x304>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800154c:	4a0f      	ldr	r2, [pc, #60]	@ (800158c <HAL_GPIO_Init+0x304>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	f67f aea2 	bls.w	80012a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3724      	adds	r7, #36	@ 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40013800 	.word	0x40013800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020400 	.word	0x40020400
 8001580:	40020800 	.word	0x40020800
 8001584:	40020c00 	.word	0x40020c00
 8001588:	40021000 	.word	0x40021000
 800158c:	40013c00 	.word	0x40013c00

08001590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e001      	b.n	80015b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d0:	787b      	ldrb	r3, [r7, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015dc:	e003      	b.n	80015e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	041a      	lsls	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	619a      	str	r2, [r3, #24]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e12b      	b.n	800185e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fa44 	bl	8000aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2224      	movs	r2, #36	@ 0x24
 8001624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001646:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001656:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001658:	f002 f970 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 800165c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a81      	ldr	r2, [pc, #516]	@ (8001868 <HAL_I2C_Init+0x274>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d807      	bhi.n	8001678 <HAL_I2C_Init+0x84>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4a80      	ldr	r2, [pc, #512]	@ (800186c <HAL_I2C_Init+0x278>)
 800166c:	4293      	cmp	r3, r2
 800166e:	bf94      	ite	ls
 8001670:	2301      	movls	r3, #1
 8001672:	2300      	movhi	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	e006      	b.n	8001686 <HAL_I2C_Init+0x92>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4a7d      	ldr	r2, [pc, #500]	@ (8001870 <HAL_I2C_Init+0x27c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	bf94      	ite	ls
 8001680:	2301      	movls	r3, #1
 8001682:	2300      	movhi	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e0e7      	b.n	800185e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4a78      	ldr	r2, [pc, #480]	@ (8001874 <HAL_I2C_Init+0x280>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	0c9b      	lsrs	r3, r3, #18
 8001698:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001868 <HAL_I2C_Init+0x274>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d802      	bhi.n	80016c8 <HAL_I2C_Init+0xd4>
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	3301      	adds	r3, #1
 80016c6:	e009      	b.n	80016dc <HAL_I2C_Init+0xe8>
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016ce:	fb02 f303 	mul.w	r3, r2, r3
 80016d2:	4a69      	ldr	r2, [pc, #420]	@ (8001878 <HAL_I2C_Init+0x284>)
 80016d4:	fba2 2303 	umull	r2, r3, r2, r3
 80016d8:	099b      	lsrs	r3, r3, #6
 80016da:	3301      	adds	r3, #1
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	430b      	orrs	r3, r1
 80016e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	495c      	ldr	r1, [pc, #368]	@ (8001868 <HAL_I2C_Init+0x274>)
 80016f8:	428b      	cmp	r3, r1
 80016fa:	d819      	bhi.n	8001730 <HAL_I2C_Init+0x13c>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1e59      	subs	r1, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	fbb1 f3f3 	udiv	r3, r1, r3
 800170a:	1c59      	adds	r1, r3, #1
 800170c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001710:	400b      	ands	r3, r1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00a      	beq.n	800172c <HAL_I2C_Init+0x138>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1e59      	subs	r1, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fbb1 f3f3 	udiv	r3, r1, r3
 8001724:	3301      	adds	r3, #1
 8001726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172a:	e051      	b.n	80017d0 <HAL_I2C_Init+0x1dc>
 800172c:	2304      	movs	r3, #4
 800172e:	e04f      	b.n	80017d0 <HAL_I2C_Init+0x1dc>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d111      	bne.n	800175c <HAL_I2C_Init+0x168>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1e58      	subs	r0, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	440b      	add	r3, r1
 8001746:	fbb0 f3f3 	udiv	r3, r0, r3
 800174a:	3301      	adds	r3, #1
 800174c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001750:	2b00      	cmp	r3, #0
 8001752:	bf0c      	ite	eq
 8001754:	2301      	moveq	r3, #1
 8001756:	2300      	movne	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	e012      	b.n	8001782 <HAL_I2C_Init+0x18e>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1e58      	subs	r0, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	0099      	lsls	r1, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001772:	3301      	adds	r3, #1
 8001774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_Init+0x196>
 8001786:	2301      	movs	r3, #1
 8001788:	e022      	b.n	80017d0 <HAL_I2C_Init+0x1dc>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10e      	bne.n	80017b0 <HAL_I2C_Init+0x1bc>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1e58      	subs	r0, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6859      	ldr	r1, [r3, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	440b      	add	r3, r1
 80017a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a4:	3301      	adds	r3, #1
 80017a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017ae:	e00f      	b.n	80017d0 <HAL_I2C_Init+0x1dc>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1e58      	subs	r0, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	0099      	lsls	r1, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	6809      	ldr	r1, [r1, #0]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69da      	ldr	r2, [r3, #28]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6911      	ldr	r1, [r2, #16]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68d2      	ldr	r2, [r2, #12]
 800180a:	4311      	orrs	r1, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	430b      	orrs	r3, r1
 8001812:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	000186a0 	.word	0x000186a0
 800186c:	001e847f 	.word	0x001e847f
 8001870:	003d08ff 	.word	0x003d08ff
 8001874:	431bde83 	.word	0x431bde83
 8001878:	10624dd3 	.word	0x10624dd3

0800187c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800188e:	2b80      	cmp	r3, #128	@ 0x80
 8001890:	d103      	bne.n	800189a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  }
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b088      	sub	sp, #32
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80018c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ce:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	2b10      	cmp	r3, #16
 80018d4:	d003      	beq.n	80018de <HAL_I2C_EV_IRQHandler+0x38>
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	2b40      	cmp	r3, #64	@ 0x40
 80018da:	f040 80c1 	bne.w	8001a60 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10d      	bne.n	8001914 <HAL_I2C_EV_IRQHandler+0x6e>
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80018fe:	d003      	beq.n	8001908 <HAL_I2C_EV_IRQHandler+0x62>
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001906:	d101      	bne.n	800190c <HAL_I2C_EV_IRQHandler+0x66>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <HAL_I2C_EV_IRQHandler+0x68>
 800190c:	2300      	movs	r3, #0
 800190e:	2b01      	cmp	r3, #1
 8001910:	f000 8132 	beq.w	8001b78 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00c      	beq.n	8001938 <HAL_I2C_EV_IRQHandler+0x92>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	0a5b      	lsrs	r3, r3, #9
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f001 fb7c 	bl	8003028 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fcf4 	bl	800231e <I2C_Master_SB>
 8001936:	e092      	b.n	8001a5e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	08db      	lsrs	r3, r3, #3
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d009      	beq.n	8001958 <HAL_I2C_EV_IRQHandler+0xb2>
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	0a5b      	lsrs	r3, r3, #9
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fd6a 	bl	800242a <I2C_Master_ADD10>
 8001956:	e082      	b.n	8001a5e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d009      	beq.n	8001978 <HAL_I2C_EV_IRQHandler+0xd2>
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	0a5b      	lsrs	r3, r3, #9
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fd84 	bl	800247e <I2C_Master_ADDR>
 8001976:	e072      	b.n	8001a5e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d03b      	beq.n	80019fc <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800198e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001992:	f000 80f3 	beq.w	8001b7c <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	09db      	lsrs	r3, r3, #7
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00f      	beq.n	80019c2 <HAL_I2C_EV_IRQHandler+0x11c>
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	0a9b      	lsrs	r3, r3, #10
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d009      	beq.n	80019c2 <HAL_I2C_EV_IRQHandler+0x11c>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f94c 	bl	8001c58 <I2C_MasterTransmit_TXE>
 80019c0:	e04d      	b.n	8001a5e <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 80d6 	beq.w	8001b7c <HAL_I2C_EV_IRQHandler+0x2d6>
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	0a5b      	lsrs	r3, r3, #9
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80cf 	beq.w	8001b7c <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	2b21      	cmp	r3, #33	@ 0x21
 80019e2:	d103      	bne.n	80019ec <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f9d3 	bl	8001d90 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019ea:	e0c7      	b.n	8001b7c <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	2b40      	cmp	r3, #64	@ 0x40
 80019f0:	f040 80c4 	bne.w	8001b7c <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fa41 	bl	8001e7c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019fa:	e0bf      	b.n	8001b7c <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a0a:	f000 80b7 	beq.w	8001b7c <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	099b      	lsrs	r3, r3, #6
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00f      	beq.n	8001a3a <HAL_I2C_EV_IRQHandler+0x194>
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	0a9b      	lsrs	r3, r3, #10
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <HAL_I2C_EV_IRQHandler+0x194>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d103      	bne.n	8001a3a <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 faba 	bl	8001fac <I2C_MasterReceive_RXNE>
 8001a38:	e011      	b.n	8001a5e <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 809a 	beq.w	8001b7c <HAL_I2C_EV_IRQHandler+0x2d6>
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	0a5b      	lsrs	r3, r3, #9
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 8093 	beq.w	8001b7c <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 fb70 	bl	800213c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a5c:	e08e      	b.n	8001b7c <HAL_I2C_EV_IRQHandler+0x2d6>
 8001a5e:	e08d      	b.n	8001b7c <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	e007      	b.n	8001a82 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	085b      	lsrs	r3, r3, #1
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d012      	beq.n	8001ab4 <HAL_I2C_EV_IRQHandler+0x20e>
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	0a5b      	lsrs	r3, r3, #9
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00c      	beq.n	8001ab4 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001aaa:	69b9      	ldr	r1, [r7, #24]
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 ff35 	bl	800291c <I2C_Slave_ADDR>
 8001ab2:	e066      	b.n	8001b82 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d009      	beq.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x22e>
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	0a5b      	lsrs	r3, r3, #9
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 ff6f 	bl	80029b0 <I2C_Slave_STOPF>
 8001ad2:	e056      	b.n	8001b82 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ad4:	7bbb      	ldrb	r3, [r7, #14]
 8001ad6:	2b21      	cmp	r3, #33	@ 0x21
 8001ad8:	d002      	beq.n	8001ae0 <HAL_I2C_EV_IRQHandler+0x23a>
 8001ada:	7bbb      	ldrb	r3, [r7, #14]
 8001adc:	2b29      	cmp	r3, #41	@ 0x29
 8001ade:	d125      	bne.n	8001b2c <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	09db      	lsrs	r3, r3, #7
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00f      	beq.n	8001b0c <HAL_I2C_EV_IRQHandler+0x266>
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	0a9b      	lsrs	r3, r3, #10
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d009      	beq.n	8001b0c <HAL_I2C_EV_IRQHandler+0x266>
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d103      	bne.n	8001b0c <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fe4b 	bl	80027a0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b0a:	e039      	b.n	8001b80 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d033      	beq.n	8001b80 <HAL_I2C_EV_IRQHandler+0x2da>
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	0a5b      	lsrs	r3, r3, #9
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d02d      	beq.n	8001b80 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fe78 	bl	800281a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b2a:	e029      	b.n	8001b80 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	099b      	lsrs	r3, r3, #6
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00f      	beq.n	8001b58 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	0a9b      	lsrs	r3, r3, #10
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d009      	beq.n	8001b58 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d103      	bne.n	8001b58 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fe83 	bl	800285c <I2C_SlaveReceive_RXNE>
 8001b56:	e014      	b.n	8001b82 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00e      	beq.n	8001b82 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	0a5b      	lsrs	r3, r3, #9
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 feb1 	bl	80028d8 <I2C_SlaveReceive_BTF>
 8001b76:	e004      	b.n	8001b82 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001b78:	bf00      	nop
 8001b7a:	e002      	b.n	8001b82 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b7c:	bf00      	nop
 8001b7e:	e000      	b.n	8001b82 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b80:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	70fb      	strb	r3, [r7, #3]
 8001be4:	4613      	mov	r3, r2
 8001be6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c66:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c6e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c74:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d150      	bne.n	8001d20 <I2C_MasterTransmit_TXE+0xc8>
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	2b21      	cmp	r3, #33	@ 0x21
 8001c82:	d14d      	bne.n	8001d20 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d01d      	beq.n	8001cc6 <I2C_MasterTransmit_TXE+0x6e>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b20      	cmp	r3, #32
 8001c8e:	d01a      	beq.n	8001cc6 <I2C_MasterTransmit_TXE+0x6e>
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c96:	d016      	beq.n	8001cc6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001ca6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2211      	movs	r2, #17
 8001cac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ff62 	bl	8001b88 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cc4:	e060      	b.n	8001d88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001cd4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ce4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b40      	cmp	r3, #64	@ 0x40
 8001cfe:	d107      	bne.n	8001d10 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff7d 	bl	8001c08 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d0e:	e03b      	b.n	8001d88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff35 	bl	8001b88 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d1e:	e033      	b.n	8001d88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	2b21      	cmp	r3, #33	@ 0x21
 8001d24:	d005      	beq.n	8001d32 <I2C_MasterTransmit_TXE+0xda>
 8001d26:	7bbb      	ldrb	r3, [r7, #14]
 8001d28:	2b40      	cmp	r3, #64	@ 0x40
 8001d2a:	d12d      	bne.n	8001d88 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b22      	cmp	r3, #34	@ 0x22
 8001d30:	d12a      	bne.n	8001d88 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d108      	bne.n	8001d4e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d4a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001d4c:	e01c      	b.n	8001d88 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b40      	cmp	r3, #64	@ 0x40
 8001d58:	d103      	bne.n	8001d62 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f88e 	bl	8001e7c <I2C_MemoryTransmit_TXE_BTF>
}
 8001d60:	e012      	b.n	8001d88 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	781a      	ldrb	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001d86:	e7ff      	b.n	8001d88 <I2C_MasterTransmit_TXE+0x130>
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b21      	cmp	r3, #33	@ 0x21
 8001da8:	d164      	bne.n	8001e74 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d012      	beq.n	8001dda <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db8:	781a      	ldrb	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001dd8:	e04c      	b.n	8001e74 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d01d      	beq.n	8001e1c <I2C_MasterTransmit_BTF+0x8c>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d01a      	beq.n	8001e1c <I2C_MasterTransmit_BTF+0x8c>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001dec:	d016      	beq.n	8001e1c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001dfc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2211      	movs	r2, #17
 8001e02:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff feb7 	bl	8001b88 <HAL_I2C_MasterTxCpltCallback>
}
 8001e1a:	e02b      	b.n	8001e74 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001e2a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e3a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b40      	cmp	r3, #64	@ 0x40
 8001e54:	d107      	bne.n	8001e66 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fed2 	bl	8001c08 <HAL_I2C_MemTxCpltCallback>
}
 8001e64:	e006      	b.n	8001e74 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff fe8a 	bl	8001b88 <HAL_I2C_MasterTxCpltCallback>
}
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d11d      	bne.n	8001ed0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d10b      	bne.n	8001eb4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eac:	1c9a      	adds	r2, r3, #2
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001eb2:	e077      	b.n	8001fa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	121b      	asrs	r3, r3, #8
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001ece:	e069      	b.n	8001fa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d10b      	bne.n	8001ef0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001eee:	e059      	b.n	8001fa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d152      	bne.n	8001f9e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	2b22      	cmp	r3, #34	@ 0x22
 8001efc:	d10d      	bne.n	8001f1a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f0c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f18:	e044      	b.n	8001fa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d015      	beq.n	8001f50 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b21      	cmp	r3, #33	@ 0x21
 8001f28:	d112      	bne.n	8001f50 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001f4e:	e029      	b.n	8001fa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d124      	bne.n	8001fa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	2b21      	cmp	r3, #33	@ 0x21
 8001f5e:	d121      	bne.n	8001fa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f6e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fe36 	bl	8001c08 <HAL_I2C_MemTxCpltCallback>
}
 8001f9c:	e002      	b.n	8001fa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fc6c 	bl	800187c <I2C_Flush_DR>
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b22      	cmp	r3, #34	@ 0x22
 8001fbe:	f040 80b9 	bne.w	8002134 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d921      	bls.n	800201a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b03      	cmp	r3, #3
 8002004:	f040 8096 	bne.w	8002134 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002016:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002018:	e08c      	b.n	8002134 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201e:	2b02      	cmp	r3, #2
 8002020:	d07f      	beq.n	8002122 <I2C_MasterReceive_RXNE+0x176>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d002      	beq.n	800202e <I2C_MasterReceive_RXNE+0x82>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d179      	bne.n	8002122 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 ffc8 	bl	8002fc4 <I2C_WaitOnSTOPRequestThroughIT>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d14c      	bne.n	80020d4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002048:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002058:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b40      	cmp	r3, #64	@ 0x40
 8002092:	d10a      	bne.n	80020aa <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff fdba 	bl	8001c1c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020a8:	e044      	b.n	8002134 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d002      	beq.n	80020be <I2C_MasterReceive_RXNE+0x112>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d103      	bne.n	80020c6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80020c4:	e002      	b.n	80020cc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2212      	movs	r2, #18
 80020ca:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff fd65 	bl	8001b9c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020d2:	e02f      	b.n	8002134 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80020e2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fd88 	bl	8001c30 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002120:	e008      	b.n	8002134 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002130:	605a      	str	r2, [r3, #4]
}
 8002132:	e7ff      	b.n	8002134 <I2C_MasterReceive_RXNE+0x188>
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002148:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b04      	cmp	r3, #4
 8002152:	d11b      	bne.n	800218c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002162:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800218a:	e0c4      	b.n	8002316 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b03      	cmp	r3, #3
 8002194:	d129      	bne.n	80021ea <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021a4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d00a      	beq.n	80021c2 <I2C_MasterReceive_BTF+0x86>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d007      	beq.n	80021c2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021c0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80021e8:	e095      	b.n	8002316 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d17d      	bne.n	80022f0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d002      	beq.n	8002200 <I2C_MasterReceive_BTF+0xc4>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d108      	bne.n	8002212 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e016      	b.n	8002240 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b04      	cmp	r3, #4
 8002216:	d002      	beq.n	800221e <I2C_MasterReceive_BTF+0xe2>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d108      	bne.n	8002230 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e007      	b.n	8002240 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800223e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800229a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b40      	cmp	r3, #64	@ 0x40
 80022ae:	d10a      	bne.n	80022c6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fcac 	bl	8001c1c <HAL_I2C_MemRxCpltCallback>
}
 80022c4:	e027      	b.n	8002316 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d002      	beq.n	80022da <I2C_MasterReceive_BTF+0x19e>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d103      	bne.n	80022e2 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
 80022e0:	e002      	b.n	80022e8 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2212      	movs	r2, #18
 80022e6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff fc57 	bl	8001b9c <HAL_I2C_MasterRxCpltCallback>
}
 80022ee:	e012      	b.n	8002316 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b40      	cmp	r3, #64	@ 0x40
 8002330:	d117      	bne.n	8002362 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800234a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800234c:	e067      	b.n	800241e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	b2da      	uxtb	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	611a      	str	r2, [r3, #16]
}
 8002360:	e05d      	b.n	800241e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800236a:	d133      	bne.n	80023d4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b21      	cmp	r3, #33	@ 0x21
 8002376:	d109      	bne.n	800238c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237c:	b2db      	uxtb	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	e008      	b.n	800239e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d004      	beq.n	80023b0 <I2C_Master_SB+0x92>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d108      	bne.n	80023c2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d032      	beq.n	800241e <I2C_Master_SB+0x100>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d02d      	beq.n	800241e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023d0:	605a      	str	r2, [r3, #4]
}
 80023d2:	e024      	b.n	800241e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10e      	bne.n	80023fa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	11db      	asrs	r3, r3, #7
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	f003 0306 	and.w	r3, r3, #6
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f063 030f 	orn	r3, r3, #15
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	611a      	str	r2, [r3, #16]
}
 80023f8:	e011      	b.n	800241e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10d      	bne.n	800241e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002406:	b29b      	uxth	r3, r3
 8002408:	11db      	asrs	r3, r3, #7
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f003 0306 	and.w	r3, r3, #6
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f063 030e 	orn	r3, r3, #14
 8002416:	b2da      	uxtb	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	611a      	str	r2, [r3, #16]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	b2da      	uxtb	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002442:	2b00      	cmp	r3, #0
 8002444:	d004      	beq.n	8002450 <I2C_Master_ADD10+0x26>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d108      	bne.n	8002462 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00c      	beq.n	8002472 <I2C_Master_ADD10+0x48>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002470:	605a      	str	r2, [r3, #4]
  }
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800247e:	b480      	push	{r7}
 8002480:	b091      	sub	sp, #68	@ 0x44
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800248c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b22      	cmp	r3, #34	@ 0x22
 80024a6:	f040 8169 	bne.w	800277c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10f      	bne.n	80024d2 <I2C_Master_ADDR+0x54>
 80024b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80024b6:	2b40      	cmp	r3, #64	@ 0x40
 80024b8:	d10b      	bne.n	80024d2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ba:	2300      	movs	r3, #0
 80024bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80024ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d0:	e160      	b.n	8002794 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d11d      	bne.n	8002516 <I2C_Master_ADDR+0x98>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80024e2:	d118      	bne.n	8002516 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002508:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	651a      	str	r2, [r3, #80]	@ 0x50
 8002514:	e13e      	b.n	8002794 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d113      	bne.n	8002548 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002520:	2300      	movs	r3, #0
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002534:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e115      	b.n	8002774 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	f040 808a 	bne.w	8002668 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002556:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800255a:	d137      	bne.n	80025cc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800256a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800257a:	d113      	bne.n	80025a4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800258a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258c:	2300      	movs	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	e0e7      	b.n	8002774 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	623b      	str	r3, [r7, #32]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e0d3      	b.n	8002774 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80025cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d02e      	beq.n	8002630 <I2C_Master_ADDR+0x1b2>
 80025d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d02b      	beq.n	8002630 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80025d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025da:	2b12      	cmp	r3, #18
 80025dc:	d102      	bne.n	80025e4 <I2C_Master_ADDR+0x166>
 80025de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d125      	bne.n	8002630 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80025e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d00e      	beq.n	8002608 <I2C_Master_ADDR+0x18a>
 80025ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d00b      	beq.n	8002608 <I2C_Master_ADDR+0x18a>
 80025f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d008      	beq.n	8002608 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e007      	b.n	8002618 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002616:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	e0a1      	b.n	8002774 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800263e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e085      	b.n	8002774 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d14d      	bne.n	800270e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002674:	2b04      	cmp	r3, #4
 8002676:	d016      	beq.n	80026a6 <I2C_Master_ADDR+0x228>
 8002678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800267a:	2b02      	cmp	r3, #2
 800267c:	d013      	beq.n	80026a6 <I2C_Master_ADDR+0x228>
 800267e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002680:	2b10      	cmp	r3, #16
 8002682:	d010      	beq.n	80026a6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002692:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e007      	b.n	80026b6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026b4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026c4:	d117      	bne.n	80026f6 <I2C_Master_ADDR+0x278>
 80026c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026cc:	d00b      	beq.n	80026e6 <I2C_Master_ADDR+0x268>
 80026ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d008      	beq.n	80026e6 <I2C_Master_ADDR+0x268>
 80026d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d005      	beq.n	80026e6 <I2C_Master_ADDR+0x268>
 80026da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d002      	beq.n	80026e6 <I2C_Master_ADDR+0x268>
 80026e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	d107      	bne.n	80026f6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80026f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	e032      	b.n	8002774 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800271c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800272c:	d117      	bne.n	800275e <I2C_Master_ADDR+0x2e0>
 800272e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002730:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002734:	d00b      	beq.n	800274e <I2C_Master_ADDR+0x2d0>
 8002736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002738:	2b01      	cmp	r3, #1
 800273a:	d008      	beq.n	800274e <I2C_Master_ADDR+0x2d0>
 800273c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273e:	2b08      	cmp	r3, #8
 8002740:	d005      	beq.n	800274e <I2C_Master_ADDR+0x2d0>
 8002742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002744:	2b10      	cmp	r3, #16
 8002746:	d002      	beq.n	800274e <I2C_Master_ADDR+0x2d0>
 8002748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274a:	2b20      	cmp	r3, #32
 800274c:	d107      	bne.n	800275e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800275c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800277a:	e00b      	b.n	8002794 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
}
 8002792:	e7ff      	b.n	8002794 <I2C_Master_ADDR+0x316>
 8002794:	bf00      	nop
 8002796:	3744      	adds	r7, #68	@ 0x44
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d02b      	beq.n	8002812 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d114      	bne.n	8002812 <I2C_SlaveTransmit_TXE+0x72>
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b29      	cmp	r3, #41	@ 0x29
 80027ec:	d111      	bne.n	8002812 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2221      	movs	r2, #33	@ 0x21
 8002802:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2228      	movs	r2, #40	@ 0x28
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff f9cf 	bl	8001bb0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d011      	beq.n	8002850 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800286a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d02c      	beq.n	80028d0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d114      	bne.n	80028d0 <I2C_SlaveReceive_RXNE+0x74>
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80028aa:	d111      	bne.n	80028d0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2222      	movs	r2, #34	@ 0x22
 80028c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2228      	movs	r2, #40	@ 0x28
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff f97a 	bl	8001bc4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d012      	beq.n	8002910 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002936:	2b28      	cmp	r3, #40	@ 0x28
 8002938:	d127      	bne.n	800298a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002948:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	089b      	lsrs	r3, r3, #2
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	09db      	lsrs	r3, r3, #7
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	81bb      	strh	r3, [r7, #12]
 800296c:	e002      	b.n	8002974 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800297c:	89ba      	ldrh	r2, [r7, #12]
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	4619      	mov	r1, r3
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff f928 	bl	8001bd8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002988:	e00e      	b.n	80029a8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80029d0:	2300      	movs	r3, #0
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a0c:	d172      	bne.n	8002af4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	2b22      	cmp	r3, #34	@ 0x22
 8002a12:	d002      	beq.n	8002a1a <I2C_Slave_STOPF+0x6a>
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a18:	d135      	bne.n	8002a86 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	f043 0204 	orr.w	r2, r3, #4
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fc09 	bl	800126a <HAL_DMA_GetState>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d049      	beq.n	8002af2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a62:	4a69      	ldr	r2, [pc, #420]	@ (8002c08 <I2C_Slave_STOPF+0x258>)
 8002a64:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fbdb 	bl	8001226 <HAL_DMA_Abort_IT>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d03d      	beq.n	8002af2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a80:	4610      	mov	r0, r2
 8002a82:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a84:	e035      	b.n	8002af2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f043 0204 	orr.w	r2, r3, #4
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ab8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fbd3 	bl	800126a <HAL_DMA_GetState>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d014      	beq.n	8002af4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ace:	4a4e      	ldr	r2, [pc, #312]	@ (8002c08 <I2C_Slave_STOPF+0x258>)
 8002ad0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fba5 	bl	8001226 <HAL_DMA_Abort_IT>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002aec:	4610      	mov	r0, r2
 8002aee:	4798      	blx	r3
 8002af0:	e000      	b.n	8002af4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002af2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d03e      	beq.n	8002b7c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d112      	bne.n	8002b32 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3c:	2b40      	cmp	r3, #64	@ 0x40
 8002b3e:	d112      	bne.n	8002b66 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f843 	bl	8002c10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b8a:	e039      	b.n	8002c00 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b90:	d109      	bne.n	8002ba6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2228      	movs	r2, #40	@ 0x28
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff f80f 	bl	8001bc4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b28      	cmp	r3, #40	@ 0x28
 8002bb0:	d111      	bne.n	8002bd6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a15      	ldr	r2, [pc, #84]	@ (8002c0c <I2C_Slave_STOPF+0x25c>)
 8002bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff f810 	bl	8001bf4 <HAL_I2C_ListenCpltCallback>
}
 8002bd4:	e014      	b.n	8002c00 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	2b22      	cmp	r3, #34	@ 0x22
 8002bdc:	d002      	beq.n	8002be4 <I2C_Slave_STOPF+0x234>
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b22      	cmp	r3, #34	@ 0x22
 8002be2:	d10d      	bne.n	8002c00 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe ffe2 	bl	8001bc4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	08002e75 	.word	0x08002e75
 8002c0c:	ffff0000 	.word	0xffff0000

08002c10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c28:	7bbb      	ldrb	r3, [r7, #14]
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d002      	beq.n	8002c34 <I2C_ITError+0x24>
 8002c2e:	7bbb      	ldrb	r3, [r7, #14]
 8002c30:	2b40      	cmp	r3, #64	@ 0x40
 8002c32:	d10a      	bne.n	8002c4a <I2C_ITError+0x3a>
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b22      	cmp	r3, #34	@ 0x22
 8002c38:	d107      	bne.n	8002c4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002c50:	2b28      	cmp	r3, #40	@ 0x28
 8002c52:	d107      	bne.n	8002c64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2228      	movs	r2, #40	@ 0x28
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002c62:	e015      	b.n	8002c90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c72:	d00a      	beq.n	8002c8a <I2C_ITError+0x7a>
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b60      	cmp	r3, #96	@ 0x60
 8002c78:	d007      	beq.n	8002c8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c9e:	d162      	bne.n	8002d66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d020      	beq.n	8002d00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc2:	4a6a      	ldr	r2, [pc, #424]	@ (8002e6c <I2C_ITError+0x25c>)
 8002cc4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe faab 	bl	8001226 <HAL_DMA_Abort_IT>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 8089 	beq.w	8002dea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4798      	blx	r3
 8002cfe:	e074      	b.n	8002dea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d04:	4a59      	ldr	r2, [pc, #356]	@ (8002e6c <I2C_ITError+0x25c>)
 8002d06:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe fa8a 	bl	8001226 <HAL_DMA_Abort_IT>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d068      	beq.n	8002dea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d22:	2b40      	cmp	r3, #64	@ 0x40
 8002d24:	d10b      	bne.n	8002d3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0201 	bic.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d60:	4610      	mov	r0, r2
 8002d62:	4798      	blx	r3
 8002d64:	e041      	b.n	8002dea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b60      	cmp	r3, #96	@ 0x60
 8002d70:	d125      	bne.n	8002dbe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d8a:	2b40      	cmp	r3, #64	@ 0x40
 8002d8c:	d10b      	bne.n	8002da6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe ff44 	bl	8001c44 <HAL_I2C_AbortCpltCallback>
 8002dbc:	e015      	b.n	8002dea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc8:	2b40      	cmp	r3, #64	@ 0x40
 8002dca:	d10b      	bne.n	8002de4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fe ff23 	bl	8001c30 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10e      	bne.n	8002e18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d104      	bne.n	8002e18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d007      	beq.n	8002e28 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e26:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e2e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d113      	bne.n	8002e64 <I2C_ITError+0x254>
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b28      	cmp	r3, #40	@ 0x28
 8002e40:	d110      	bne.n	8002e64 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a0a      	ldr	r2, [pc, #40]	@ (8002e70 <I2C_ITError+0x260>)
 8002e46:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe fec8 	bl	8001bf4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	08002e75 	.word	0x08002e75
 8002e70:	ffff0000 	.word	0xffff0000

08002e74 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e84:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e8e:	4b4b      	ldr	r3, [pc, #300]	@ (8002fbc <I2C_DMAAbort+0x148>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	08db      	lsrs	r3, r3, #3
 8002e94:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc0 <I2C_DMAAbort+0x14c>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	0a1a      	lsrs	r2, r3, #8
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00da      	lsls	r2, r3, #3
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	f043 0220 	orr.w	r2, r3, #32
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002eba:	e00a      	b.n	8002ed2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ed0:	d0ea      	beq.n	8002ea8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ede:	2200      	movs	r2, #0
 8002ee0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eee:	2200      	movs	r2, #0
 8002ef0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f00:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2200      	movs	r2, #0
 8002f06:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f14:	2200      	movs	r2, #0
 8002f16:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f24:	2200      	movs	r2, #0
 8002f26:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b60      	cmp	r3, #96	@ 0x60
 8002f42:	d10e      	bne.n	8002f62 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2200      	movs	r2, #0
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f5a:	6978      	ldr	r0, [r7, #20]
 8002f5c:	f7fe fe72 	bl	8001c44 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f60:	e027      	b.n	8002fb2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f68:	2b28      	cmp	r3, #40	@ 0x28
 8002f6a:	d117      	bne.n	8002f9c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f8a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2228      	movs	r2, #40	@ 0x28
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002f9a:	e007      	b.n	8002fac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002fac:	6978      	ldr	r0, [r7, #20]
 8002fae:	f7fe fe3f 	bl	8001c30 <HAL_I2C_ErrorCallback>
}
 8002fb2:	bf00      	nop
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	14f8b589 	.word	0x14f8b589

08002fc4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fd0:	4b13      	ldr	r3, [pc, #76]	@ (8003020 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	08db      	lsrs	r3, r3, #3
 8002fd6:	4a13      	ldr	r2, [pc, #76]	@ (8003024 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	0a1a      	lsrs	r2, r3, #8
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d107      	bne.n	8003002 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e008      	b.n	8003014 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800300c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003010:	d0e9      	beq.n	8002fe6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	20000000 	.word	0x20000000
 8003024:	14f8b589 	.word	0x14f8b589

08003028 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003034:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003038:	d103      	bne.n	8003042 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003040:	e007      	b.n	8003052 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003046:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800304a:	d102      	bne.n	8003052 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2208      	movs	r2, #8
 8003050:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8003068:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <HAL_PWR_EnableWakeUpPin+0x20>)
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	4904      	ldr	r1, [pc, #16]	@ (8003080 <HAL_PWR_EnableWakeUpPin+0x20>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	40007000 	.word	0x40007000

08003084 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800308c:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <HAL_PWR_DisableWakeUpPin+0x24>)
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	43db      	mvns	r3, r3
 8003094:	4904      	ldr	r1, [pc, #16]	@ (80030a8 <HAL_PWR_DisableWakeUpPin+0x24>)
 8003096:	4013      	ands	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40007000 	.word	0x40007000

080030ac <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80030b0:	4b08      	ldr	r3, [pc, #32]	@ (80030d4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a07      	ldr	r2, [pc, #28]	@ (80030d4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80030b6:	f043 0302 	orr.w	r3, r3, #2
 80030ba:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80030bc:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	4a05      	ldr	r2, [pc, #20]	@ (80030d8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80030c2:	f043 0304 	orr.w	r3, r3, #4
 80030c6:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80030c8:	bf30      	wfi
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	40007000 	.word	0x40007000
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e267      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d075      	beq.n	80031e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030fa:	4b88      	ldr	r3, [pc, #544]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b04      	cmp	r3, #4
 8003104:	d00c      	beq.n	8003120 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003106:	4b85      	ldr	r3, [pc, #532]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800310e:	2b08      	cmp	r3, #8
 8003110:	d112      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003112:	4b82      	ldr	r3, [pc, #520]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800311a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800311e:	d10b      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	4b7e      	ldr	r3, [pc, #504]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d05b      	beq.n	80031e4 <HAL_RCC_OscConfig+0x108>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d157      	bne.n	80031e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e242      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003140:	d106      	bne.n	8003150 <HAL_RCC_OscConfig+0x74>
 8003142:	4b76      	ldr	r3, [pc, #472]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a75      	ldr	r2, [pc, #468]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e01d      	b.n	800318c <HAL_RCC_OscConfig+0xb0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x98>
 800315a:	4b70      	ldr	r3, [pc, #448]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6f      	ldr	r2, [pc, #444]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 8003160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b6d      	ldr	r3, [pc, #436]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6c      	ldr	r2, [pc, #432]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 800316c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e00b      	b.n	800318c <HAL_RCC_OscConfig+0xb0>
 8003174:	4b69      	ldr	r3, [pc, #420]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a68      	ldr	r2, [pc, #416]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 800317a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	4b66      	ldr	r3, [pc, #408]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a65      	ldr	r2, [pc, #404]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 8003186:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800318a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d013      	beq.n	80031bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fd fe96 	bl	8000ec4 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800319c:	f7fd fe92 	bl	8000ec4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	@ 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e207      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	4b5b      	ldr	r3, [pc, #364]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0xc0>
 80031ba:	e014      	b.n	80031e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fd fe82 	bl	8000ec4 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c4:	f7fd fe7e 	bl	8000ec4 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	@ 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e1f3      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d6:	4b51      	ldr	r3, [pc, #324]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0xe8>
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d063      	beq.n	80032ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031f2:	4b4a      	ldr	r3, [pc, #296]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fe:	4b47      	ldr	r3, [pc, #284]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003206:	2b08      	cmp	r3, #8
 8003208:	d11c      	bne.n	8003244 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320a:	4b44      	ldr	r3, [pc, #272]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d116      	bne.n	8003244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	4b41      	ldr	r3, [pc, #260]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_RCC_OscConfig+0x152>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d001      	beq.n	800322e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e1c7      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322e:	4b3b      	ldr	r3, [pc, #236]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4937      	ldr	r1, [pc, #220]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	e03a      	b.n	80032ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324c:	4b34      	ldr	r3, [pc, #208]	@ (8003320 <HAL_RCC_OscConfig+0x244>)
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7fd fe37 	bl	8000ec4 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800325a:	f7fd fe33 	bl	8000ec4 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e1a8      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326c:	4b2b      	ldr	r3, [pc, #172]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b28      	ldr	r3, [pc, #160]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4925      	ldr	r1, [pc, #148]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 8003288:	4313      	orrs	r3, r2
 800328a:	600b      	str	r3, [r1, #0]
 800328c:	e015      	b.n	80032ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328e:	4b24      	ldr	r3, [pc, #144]	@ (8003320 <HAL_RCC_OscConfig+0x244>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fd fe16 	bl	8000ec4 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329c:	f7fd fe12 	bl	8000ec4 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e187      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	4b1b      	ldr	r3, [pc, #108]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d036      	beq.n	8003334 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ce:	4b15      	ldr	r3, [pc, #84]	@ (8003324 <HAL_RCC_OscConfig+0x248>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fd fdf6 	bl	8000ec4 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032dc:	f7fd fdf2 	bl	8000ec4 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e167      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ee:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <HAL_RCC_OscConfig+0x240>)
 80032f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x200>
 80032fa:	e01b      	b.n	8003334 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fc:	4b09      	ldr	r3, [pc, #36]	@ (8003324 <HAL_RCC_OscConfig+0x248>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003302:	f7fd fddf 	bl	8000ec4 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	e00e      	b.n	8003328 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330a:	f7fd fddb 	bl	8000ec4 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d907      	bls.n	8003328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e150      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
 800331c:	40023800 	.word	0x40023800
 8003320:	42470000 	.word	0x42470000
 8003324:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003328:	4b88      	ldr	r3, [pc, #544]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 800332a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ea      	bne.n	800330a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8097 	beq.w	8003470 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003346:	4b81      	ldr	r3, [pc, #516]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	4b7d      	ldr	r3, [pc, #500]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	4a7c      	ldr	r2, [pc, #496]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003360:	6413      	str	r3, [r2, #64]	@ 0x40
 8003362:	4b7a      	ldr	r3, [pc, #488]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336e:	2301      	movs	r3, #1
 8003370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003372:	4b77      	ldr	r3, [pc, #476]	@ (8003550 <HAL_RCC_OscConfig+0x474>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d118      	bne.n	80033b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337e:	4b74      	ldr	r3, [pc, #464]	@ (8003550 <HAL_RCC_OscConfig+0x474>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a73      	ldr	r2, [pc, #460]	@ (8003550 <HAL_RCC_OscConfig+0x474>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338a:	f7fd fd9b 	bl	8000ec4 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003392:	f7fd fd97 	bl	8000ec4 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e10c      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003550 <HAL_RCC_OscConfig+0x474>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x2ea>
 80033b8:	4b64      	ldr	r3, [pc, #400]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033bc:	4a63      	ldr	r2, [pc, #396]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c4:	e01c      	b.n	8003400 <HAL_RCC_OscConfig+0x324>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x30c>
 80033ce:	4b5f      	ldr	r3, [pc, #380]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d2:	4a5e      	ldr	r2, [pc, #376]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033da:	4b5c      	ldr	r3, [pc, #368]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033de:	4a5b      	ldr	r2, [pc, #364]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0x324>
 80033e8:	4b58      	ldr	r3, [pc, #352]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ec:	4a57      	ldr	r2, [pc, #348]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f4:	4b55      	ldr	r3, [pc, #340]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f8:	4a54      	ldr	r2, [pc, #336]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 80033fa:	f023 0304 	bic.w	r3, r3, #4
 80033fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d015      	beq.n	8003434 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fd fd5c 	bl	8000ec4 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fd fd58 	bl	8000ec4 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0cb      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003426:	4b49      	ldr	r3, [pc, #292]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ee      	beq.n	8003410 <HAL_RCC_OscConfig+0x334>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003434:	f7fd fd46 	bl	8000ec4 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7fd fd42 	bl	8000ec4 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e0b5      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003452:	4b3e      	ldr	r3, [pc, #248]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1ee      	bne.n	800343c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800345e:	7dfb      	ldrb	r3, [r7, #23]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d105      	bne.n	8003470 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003464:	4b39      	ldr	r3, [pc, #228]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	4a38      	ldr	r2, [pc, #224]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 800346a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a1 	beq.w	80035bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800347a:	4b34      	ldr	r3, [pc, #208]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b08      	cmp	r3, #8
 8003484:	d05c      	beq.n	8003540 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d141      	bne.n	8003512 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348e:	4b31      	ldr	r3, [pc, #196]	@ (8003554 <HAL_RCC_OscConfig+0x478>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fd fd16 	bl	8000ec4 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fd fd12 	bl	8000ec4 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e087      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	4b27      	ldr	r3, [pc, #156]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	019b      	lsls	r3, r3, #6
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	3b01      	subs	r3, #1
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	491b      	ldr	r1, [pc, #108]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003554 <HAL_RCC_OscConfig+0x478>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fd fceb 	bl	8000ec4 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fd fce7 	bl	8000ec4 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e05c      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003504:	4b11      	ldr	r3, [pc, #68]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x416>
 8003510:	e054      	b.n	80035bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b10      	ldr	r3, [pc, #64]	@ (8003554 <HAL_RCC_OscConfig+0x478>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fd fcd4 	bl	8000ec4 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fd fcd0 	bl	8000ec4 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e045      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	4b06      	ldr	r3, [pc, #24]	@ (800354c <HAL_RCC_OscConfig+0x470>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x444>
 800353e:	e03d      	b.n	80035bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e038      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
 800354c:	40023800 	.word	0x40023800
 8003550:	40007000 	.word	0x40007000
 8003554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003558:	4b1b      	ldr	r3, [pc, #108]	@ (80035c8 <HAL_RCC_OscConfig+0x4ec>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d028      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d121      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d11a      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003588:	4013      	ands	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800358e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003590:	4293      	cmp	r3, r2
 8003592:	d111      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	3b01      	subs	r3, #1
 80035a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800

080035cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0cc      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e0:	4b68      	ldr	r3, [pc, #416]	@ (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d90c      	bls.n	8003608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b65      	ldr	r3, [pc, #404]	@ (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b63      	ldr	r3, [pc, #396]	@ (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0b8      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d020      	beq.n	8003656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003620:	4b59      	ldr	r3, [pc, #356]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a58      	ldr	r2, [pc, #352]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800362a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003638:	4b53      	ldr	r3, [pc, #332]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4a52      	ldr	r2, [pc, #328]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003644:	4b50      	ldr	r3, [pc, #320]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	494d      	ldr	r1, [pc, #308]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d044      	beq.n	80036ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366a:	4b47      	ldr	r3, [pc, #284]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d119      	bne.n	80036aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e07f      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d003      	beq.n	800368a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003686:	2b03      	cmp	r3, #3
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368a:	4b3f      	ldr	r3, [pc, #252]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e06f      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369a:	4b3b      	ldr	r3, [pc, #236]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e067      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036aa:	4b37      	ldr	r3, [pc, #220]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f023 0203 	bic.w	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4934      	ldr	r1, [pc, #208]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036bc:	f7fd fc02 	bl	8000ec4 <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	e00a      	b.n	80036da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c4:	f7fd fbfe 	bl	8000ec4 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e04f      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036da:	4b2b      	ldr	r3, [pc, #172]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 020c 	and.w	r2, r3, #12
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d1eb      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036ec:	4b25      	ldr	r3, [pc, #148]	@ (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d20c      	bcs.n	8003714 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	4b22      	ldr	r3, [pc, #136]	@ (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b20      	ldr	r3, [pc, #128]	@ (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e032      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003720:	4b19      	ldr	r3, [pc, #100]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4916      	ldr	r1, [pc, #88]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800373e:	4b12      	ldr	r3, [pc, #72]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	490e      	ldr	r1, [pc, #56]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003752:	f000 f821 	bl	8003798 <HAL_RCC_GetSysClockFreq>
 8003756:	4602      	mov	r2, r0
 8003758:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	490a      	ldr	r1, [pc, #40]	@ (800378c <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	5ccb      	ldrb	r3, [r1, r3]
 8003766:	fa22 f303 	lsr.w	r3, r2, r3
 800376a:	4a09      	ldr	r2, [pc, #36]	@ (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800376e:	4b09      	ldr	r3, [pc, #36]	@ (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fd fb62 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40023c00 	.word	0x40023c00
 8003788:	40023800 	.word	0x40023800
 800378c:	080057a4 	.word	0x080057a4
 8003790:	20000000 	.word	0x20000000
 8003794:	20000004 	.word	0x20000004

08003798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800379c:	b090      	sub	sp, #64	@ 0x40
 800379e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b0:	4b59      	ldr	r3, [pc, #356]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d00d      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x40>
 80037bc:	2b08      	cmp	r3, #8
 80037be:	f200 80a1 	bhi.w	8003904 <HAL_RCC_GetSysClockFreq+0x16c>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x34>
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d003      	beq.n	80037d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ca:	e09b      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b53      	ldr	r3, [pc, #332]	@ (800391c <HAL_RCC_GetSysClockFreq+0x184>)
 80037ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037d0:	e09b      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037d2:	4b53      	ldr	r3, [pc, #332]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037d6:	e098      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x180>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x180>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d028      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x180>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	099b      	lsrs	r3, r3, #6
 80037f4:	2200      	movs	r2, #0
 80037f6:	623b      	str	r3, [r7, #32]
 80037f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003800:	2100      	movs	r1, #0
 8003802:	4b47      	ldr	r3, [pc, #284]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x188>)
 8003804:	fb03 f201 	mul.w	r2, r3, r1
 8003808:	2300      	movs	r3, #0
 800380a:	fb00 f303 	mul.w	r3, r0, r3
 800380e:	4413      	add	r3, r2
 8003810:	4a43      	ldr	r2, [pc, #268]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x188>)
 8003812:	fba0 1202 	umull	r1, r2, r0, r2
 8003816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003818:	460a      	mov	r2, r1
 800381a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800381c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800381e:	4413      	add	r3, r2
 8003820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003824:	2200      	movs	r2, #0
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	61fa      	str	r2, [r7, #28]
 800382a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800382e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003832:	f7fc fd25 	bl	8000280 <__aeabi_uldivmod>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4613      	mov	r3, r2
 800383c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800383e:	e053      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003840:	4b35      	ldr	r3, [pc, #212]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x180>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	099b      	lsrs	r3, r3, #6
 8003846:	2200      	movs	r2, #0
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	617a      	str	r2, [r7, #20]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003852:	f04f 0b00 	mov.w	fp, #0
 8003856:	4652      	mov	r2, sl
 8003858:	465b      	mov	r3, fp
 800385a:	f04f 0000 	mov.w	r0, #0
 800385e:	f04f 0100 	mov.w	r1, #0
 8003862:	0159      	lsls	r1, r3, #5
 8003864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003868:	0150      	lsls	r0, r2, #5
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	ebb2 080a 	subs.w	r8, r2, sl
 8003872:	eb63 090b 	sbc.w	r9, r3, fp
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003882:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003886:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800388a:	ebb2 0408 	subs.w	r4, r2, r8
 800388e:	eb63 0509 	sbc.w	r5, r3, r9
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	00eb      	lsls	r3, r5, #3
 800389c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a0:	00e2      	lsls	r2, r4, #3
 80038a2:	4614      	mov	r4, r2
 80038a4:	461d      	mov	r5, r3
 80038a6:	eb14 030a 	adds.w	r3, r4, sl
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	eb45 030b 	adc.w	r3, r5, fp
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038be:	4629      	mov	r1, r5
 80038c0:	028b      	lsls	r3, r1, #10
 80038c2:	4621      	mov	r1, r4
 80038c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038c8:	4621      	mov	r1, r4
 80038ca:	028a      	lsls	r2, r1, #10
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d2:	2200      	movs	r2, #0
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	60fa      	str	r2, [r7, #12]
 80038d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038dc:	f7fc fcd0 	bl	8000280 <__aeabi_uldivmod>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4613      	mov	r3, r2
 80038e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	3301      	adds	r3, #1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80038f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003902:	e002      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b05      	ldr	r3, [pc, #20]	@ (800391c <HAL_RCC_GetSysClockFreq+0x184>)
 8003906:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800390c:	4618      	mov	r0, r3
 800390e:	3740      	adds	r7, #64	@ 0x40
 8003910:	46bd      	mov	sp, r7
 8003912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800
 800391c:	00f42400 	.word	0x00f42400
 8003920:	017d7840 	.word	0x017d7840

08003924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003928:	4b03      	ldr	r3, [pc, #12]	@ (8003938 <HAL_RCC_GetHCLKFreq+0x14>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20000000 	.word	0x20000000

0800393c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003940:	f7ff fff0 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	0a9b      	lsrs	r3, r3, #10
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4903      	ldr	r1, [pc, #12]	@ (8003960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40023800 	.word	0x40023800
 8003960:	080057b4 	.word	0x080057b4

08003964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003968:	f7ff ffdc 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b05      	ldr	r3, [pc, #20]	@ (8003984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	0b5b      	lsrs	r3, r3, #13
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4903      	ldr	r1, [pc, #12]	@ (8003988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40023800 	.word	0x40023800
 8003988:	080057b4 	.word	0x080057b4

0800398c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e042      	b.n	8003a24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd f8c8 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2224      	movs	r2, #36	@ 0x24
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fc99 	bl	8004308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b0ba      	sub	sp, #232	@ 0xe8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10f      	bne.n	8003a92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_UART_IRQHandler+0x66>
 8003a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fb7e 	bl	800418c <UART_Receive_IT>
      return;
 8003a90:	e273      	b.n	8003f7a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80de 	beq.w	8003c58 <HAL_UART_IRQHandler+0x22c>
 8003a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80d1 	beq.w	8003c58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_UART_IRQHandler+0xae>
 8003ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_UART_IRQHandler+0xd2>
 8003ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	f043 0202 	orr.w	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_UART_IRQHandler+0xf6>
 8003b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	f043 0204 	orr.w	r2, r3, #4
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d011      	beq.n	8003b52 <HAL_UART_IRQHandler+0x126>
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d105      	bne.n	8003b46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4a:	f043 0208 	orr.w	r2, r3, #8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 820a 	beq.w	8003f70 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_UART_IRQHandler+0x14e>
 8003b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fb09 	bl	800418c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b84:	2b40      	cmp	r3, #64	@ 0x40
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x17a>
 8003b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d04f      	beq.n	8003c46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fa14 	bl	8003fd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb6:	2b40      	cmp	r3, #64	@ 0x40
 8003bb8:	d141      	bne.n	8003c3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3314      	adds	r3, #20
 8003bc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3314      	adds	r3, #20
 8003be2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003be6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003bea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1d9      	bne.n	8003bba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d013      	beq.n	8003c36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c12:	4a8a      	ldr	r2, [pc, #552]	@ (8003e3c <HAL_UART_IRQHandler+0x410>)
 8003c14:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fd fb03 	bl	8001226 <HAL_DMA_Abort_IT>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d016      	beq.n	8003c54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c30:	4610      	mov	r0, r2
 8003c32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	e00e      	b.n	8003c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f9b6 	bl	8003fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	e00a      	b.n	8003c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f9b2 	bl	8003fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	e006      	b.n	8003c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f9ae 	bl	8003fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c52:	e18d      	b.n	8003f70 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	bf00      	nop
    return;
 8003c56:	e18b      	b.n	8003f70 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	f040 8167 	bne.w	8003f30 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8160 	beq.w	8003f30 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8159 	beq.w	8003f30 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ca0:	f040 80ce 	bne.w	8003e40 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80a9 	beq.w	8003e0c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	f080 80a2 	bcs.w	8003e0c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cda:	f000 8088 	beq.w	8003dee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1d9      	bne.n	8003cde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3314      	adds	r3, #20
 8003d4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e1      	bne.n	8003d2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3314      	adds	r3, #20
 8003d6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3314      	adds	r3, #20
 8003d86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e3      	bne.n	8003d66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	330c      	adds	r3, #12
 8003db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003db6:	e853 3f00 	ldrex	r3, [r3]
 8003dba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003dbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dbe:	f023 0310 	bic.w	r3, r3, #16
 8003dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003dd0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003dd2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003dde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e3      	bne.n	8003dac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fd f9ac 	bl	8001146 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2202      	movs	r2, #2
 8003df2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	4619      	mov	r1, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f8d9 	bl	8003fbc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003e0a:	e0b3      	b.n	8003f74 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e14:	429a      	cmp	r2, r3
 8003e16:	f040 80ad 	bne.w	8003f74 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e24:	f040 80a6 	bne.w	8003f74 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e32:	4619      	mov	r1, r3
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f8c1 	bl	8003fbc <HAL_UARTEx_RxEventCallback>
      return;
 8003e3a:	e09b      	b.n	8003f74 <HAL_UART_IRQHandler+0x548>
 8003e3c:	0800409b 	.word	0x0800409b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 808e 	beq.w	8003f78 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8089 	beq.w	8003f78 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e3      	bne.n	8003e66 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3314      	adds	r3, #20
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	623b      	str	r3, [r7, #32]
   return(result);
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3314      	adds	r3, #20
 8003ebe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ec2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e3      	bne.n	8003e9e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0310 	bic.w	r3, r3, #16
 8003efa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f08:	61fa      	str	r2, [r7, #28]
 8003f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	69b9      	ldr	r1, [r7, #24]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	617b      	str	r3, [r7, #20]
   return(result);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e3      	bne.n	8003ee4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f26:	4619      	mov	r1, r3
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f847 	bl	8003fbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f2e:	e023      	b.n	8003f78 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <HAL_UART_IRQHandler+0x524>
 8003f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f8b7 	bl	80040bc <UART_Transmit_IT>
    return;
 8003f4e:	e014      	b.n	8003f7a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00e      	beq.n	8003f7a <HAL_UART_IRQHandler+0x54e>
 8003f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f8f7 	bl	800415c <UART_EndTransmit_IT>
    return;
 8003f6e:	e004      	b.n	8003f7a <HAL_UART_IRQHandler+0x54e>
    return;
 8003f70:	bf00      	nop
 8003f72:	e002      	b.n	8003f7a <HAL_UART_IRQHandler+0x54e>
      return;
 8003f74:	bf00      	nop
 8003f76:	e000      	b.n	8003f7a <HAL_UART_IRQHandler+0x54e>
      return;
 8003f78:	bf00      	nop
  }
}
 8003f7a:	37e8      	adds	r7, #232	@ 0xe8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b095      	sub	sp, #84	@ 0x54
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ffc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004000:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004002:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004004:	e841 2300 	strex	r3, r2, [r1]
 8004008:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800400a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e5      	bne.n	8003fdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3314      	adds	r3, #20
 8004016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3314      	adds	r3, #20
 800402e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004030:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004032:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e5      	bne.n	8004010 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004048:	2b01      	cmp	r3, #1
 800404a:	d119      	bne.n	8004080 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	60bb      	str	r3, [r7, #8]
   return(result);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f023 0310 	bic.w	r3, r3, #16
 8004062:	647b      	str	r3, [r7, #68]	@ 0x44
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	330c      	adds	r3, #12
 800406a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800406c:	61ba      	str	r2, [r7, #24]
 800406e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	6979      	ldr	r1, [r7, #20]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	613b      	str	r3, [r7, #16]
   return(result);
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e5      	bne.n	800404c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800408e:	bf00      	nop
 8004090:	3754      	adds	r7, #84	@ 0x54
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f7ff ff7a 	bl	8003fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b21      	cmp	r3, #33	@ 0x21
 80040ce:	d13e      	bne.n	800414e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d8:	d114      	bne.n	8004104 <UART_Transmit_IT+0x48>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d110      	bne.n	8004104 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	1c9a      	adds	r2, r3, #2
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]
 8004102:	e008      	b.n	8004116 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	1c59      	adds	r1, r3, #1
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6211      	str	r1, [r2, #32]
 800410e:	781a      	ldrb	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29b      	uxth	r3, r3
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	4619      	mov	r1, r3
 8004124:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10f      	bne.n	800414a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004138:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004148:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	e000      	b.n	8004150 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800414e:	2302      	movs	r3, #2
  }
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004172:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff feff 	bl	8003f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08c      	sub	sp, #48	@ 0x30
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004194:	2300      	movs	r3, #0
 8004196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004198:	2300      	movs	r3, #0
 800419a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b22      	cmp	r3, #34	@ 0x22
 80041a6:	f040 80aa 	bne.w	80042fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b2:	d115      	bne.n	80041e0 <UART_Receive_IT+0x54>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d111      	bne.n	80041e0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d8:	1c9a      	adds	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80041de:	e024      	b.n	800422a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ee:	d007      	beq.n	8004200 <UART_Receive_IT+0x74>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <UART_Receive_IT+0x82>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d106      	bne.n	800420e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	b2da      	uxtb	r2, r3
 8004208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	e008      	b.n	8004220 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800421a:	b2da      	uxtb	r2, r3
 800421c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29b      	uxth	r3, r3
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	4619      	mov	r1, r3
 8004238:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800423a:	2b00      	cmp	r3, #0
 800423c:	d15d      	bne.n	80042fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0220 	bic.w	r2, r2, #32
 800424c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800425c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004280:	2b01      	cmp	r3, #1
 8004282:	d135      	bne.n	80042f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	613b      	str	r3, [r7, #16]
   return(result);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f023 0310 	bic.w	r3, r3, #16
 80042a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	330c      	adds	r3, #12
 80042a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042aa:	623a      	str	r2, [r7, #32]
 80042ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	69f9      	ldr	r1, [r7, #28]
 80042b0:	6a3a      	ldr	r2, [r7, #32]
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e5      	bne.n	800428a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d10a      	bne.n	80042e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff fe67 	bl	8003fbc <HAL_UARTEx_RxEventCallback>
 80042ee:	e002      	b.n	80042f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff fe4f 	bl	8003f94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	e002      	b.n	8004300 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3730      	adds	r7, #48	@ 0x30
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800430c:	b0c0      	sub	sp, #256	@ 0x100
 800430e:	af00      	add	r7, sp, #0
 8004310:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	68d9      	ldr	r1, [r3, #12]
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	ea40 0301 	orr.w	r3, r0, r1
 8004330:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	431a      	orrs	r2, r3
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	431a      	orrs	r2, r3
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004360:	f021 010c 	bic.w	r1, r1, #12
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800436e:	430b      	orrs	r3, r1
 8004370:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004382:	6999      	ldr	r1, [r3, #24]
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	ea40 0301 	orr.w	r3, r0, r1
 800438e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	4b8f      	ldr	r3, [pc, #572]	@ (80045d4 <UART_SetConfig+0x2cc>)
 8004398:	429a      	cmp	r2, r3
 800439a:	d005      	beq.n	80043a8 <UART_SetConfig+0xa0>
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b8d      	ldr	r3, [pc, #564]	@ (80045d8 <UART_SetConfig+0x2d0>)
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d104      	bne.n	80043b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043a8:	f7ff fadc 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 80043ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043b0:	e003      	b.n	80043ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043b2:	f7ff fac3 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 80043b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c4:	f040 810c 	bne.w	80045e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043da:	4622      	mov	r2, r4
 80043dc:	462b      	mov	r3, r5
 80043de:	1891      	adds	r1, r2, r2
 80043e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043e2:	415b      	adcs	r3, r3
 80043e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043ea:	4621      	mov	r1, r4
 80043ec:	eb12 0801 	adds.w	r8, r2, r1
 80043f0:	4629      	mov	r1, r5
 80043f2:	eb43 0901 	adc.w	r9, r3, r1
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800440a:	4690      	mov	r8, r2
 800440c:	4699      	mov	r9, r3
 800440e:	4623      	mov	r3, r4
 8004410:	eb18 0303 	adds.w	r3, r8, r3
 8004414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004418:	462b      	mov	r3, r5
 800441a:	eb49 0303 	adc.w	r3, r9, r3
 800441e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800442e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004432:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004436:	460b      	mov	r3, r1
 8004438:	18db      	adds	r3, r3, r3
 800443a:	653b      	str	r3, [r7, #80]	@ 0x50
 800443c:	4613      	mov	r3, r2
 800443e:	eb42 0303 	adc.w	r3, r2, r3
 8004442:	657b      	str	r3, [r7, #84]	@ 0x54
 8004444:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004448:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800444c:	f7fb ff18 	bl	8000280 <__aeabi_uldivmod>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4b61      	ldr	r3, [pc, #388]	@ (80045dc <UART_SetConfig+0x2d4>)
 8004456:	fba3 2302 	umull	r2, r3, r3, r2
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	011c      	lsls	r4, r3, #4
 800445e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004462:	2200      	movs	r2, #0
 8004464:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004468:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800446c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004470:	4642      	mov	r2, r8
 8004472:	464b      	mov	r3, r9
 8004474:	1891      	adds	r1, r2, r2
 8004476:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004478:	415b      	adcs	r3, r3
 800447a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800447c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004480:	4641      	mov	r1, r8
 8004482:	eb12 0a01 	adds.w	sl, r2, r1
 8004486:	4649      	mov	r1, r9
 8004488:	eb43 0b01 	adc.w	fp, r3, r1
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004498:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800449c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044a0:	4692      	mov	sl, r2
 80044a2:	469b      	mov	fp, r3
 80044a4:	4643      	mov	r3, r8
 80044a6:	eb1a 0303 	adds.w	r3, sl, r3
 80044aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044ae:	464b      	mov	r3, r9
 80044b0:	eb4b 0303 	adc.w	r3, fp, r3
 80044b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044cc:	460b      	mov	r3, r1
 80044ce:	18db      	adds	r3, r3, r3
 80044d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80044d2:	4613      	mov	r3, r2
 80044d4:	eb42 0303 	adc.w	r3, r2, r3
 80044d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044e2:	f7fb fecd 	bl	8000280 <__aeabi_uldivmod>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4611      	mov	r1, r2
 80044ec:	4b3b      	ldr	r3, [pc, #236]	@ (80045dc <UART_SetConfig+0x2d4>)
 80044ee:	fba3 2301 	umull	r2, r3, r3, r1
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2264      	movs	r2, #100	@ 0x64
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	1acb      	subs	r3, r1, r3
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004502:	4b36      	ldr	r3, [pc, #216]	@ (80045dc <UART_SetConfig+0x2d4>)
 8004504:	fba3 2302 	umull	r2, r3, r3, r2
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004510:	441c      	add	r4, r3
 8004512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004516:	2200      	movs	r2, #0
 8004518:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800451c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004520:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004524:	4642      	mov	r2, r8
 8004526:	464b      	mov	r3, r9
 8004528:	1891      	adds	r1, r2, r2
 800452a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800452c:	415b      	adcs	r3, r3
 800452e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004530:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004534:	4641      	mov	r1, r8
 8004536:	1851      	adds	r1, r2, r1
 8004538:	6339      	str	r1, [r7, #48]	@ 0x30
 800453a:	4649      	mov	r1, r9
 800453c:	414b      	adcs	r3, r1
 800453e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800454c:	4659      	mov	r1, fp
 800454e:	00cb      	lsls	r3, r1, #3
 8004550:	4651      	mov	r1, sl
 8004552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004556:	4651      	mov	r1, sl
 8004558:	00ca      	lsls	r2, r1, #3
 800455a:	4610      	mov	r0, r2
 800455c:	4619      	mov	r1, r3
 800455e:	4603      	mov	r3, r0
 8004560:	4642      	mov	r2, r8
 8004562:	189b      	adds	r3, r3, r2
 8004564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004568:	464b      	mov	r3, r9
 800456a:	460a      	mov	r2, r1
 800456c:	eb42 0303 	adc.w	r3, r2, r3
 8004570:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004580:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004584:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004588:	460b      	mov	r3, r1
 800458a:	18db      	adds	r3, r3, r3
 800458c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800458e:	4613      	mov	r3, r2
 8004590:	eb42 0303 	adc.w	r3, r2, r3
 8004594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800459a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800459e:	f7fb fe6f 	bl	8000280 <__aeabi_uldivmod>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4b0d      	ldr	r3, [pc, #52]	@ (80045dc <UART_SetConfig+0x2d4>)
 80045a8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	2164      	movs	r1, #100	@ 0x64
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	3332      	adds	r3, #50	@ 0x32
 80045ba:	4a08      	ldr	r2, [pc, #32]	@ (80045dc <UART_SetConfig+0x2d4>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	f003 0207 	and.w	r2, r3, #7
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4422      	add	r2, r4
 80045ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045d0:	e106      	b.n	80047e0 <UART_SetConfig+0x4d8>
 80045d2:	bf00      	nop
 80045d4:	40011000 	.word	0x40011000
 80045d8:	40011400 	.word	0x40011400
 80045dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045f2:	4642      	mov	r2, r8
 80045f4:	464b      	mov	r3, r9
 80045f6:	1891      	adds	r1, r2, r2
 80045f8:	6239      	str	r1, [r7, #32]
 80045fa:	415b      	adcs	r3, r3
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004602:	4641      	mov	r1, r8
 8004604:	1854      	adds	r4, r2, r1
 8004606:	4649      	mov	r1, r9
 8004608:	eb43 0501 	adc.w	r5, r3, r1
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	00eb      	lsls	r3, r5, #3
 8004616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800461a:	00e2      	lsls	r2, r4, #3
 800461c:	4614      	mov	r4, r2
 800461e:	461d      	mov	r5, r3
 8004620:	4643      	mov	r3, r8
 8004622:	18e3      	adds	r3, r4, r3
 8004624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004628:	464b      	mov	r3, r9
 800462a:	eb45 0303 	adc.w	r3, r5, r3
 800462e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800463e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800464e:	4629      	mov	r1, r5
 8004650:	008b      	lsls	r3, r1, #2
 8004652:	4621      	mov	r1, r4
 8004654:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004658:	4621      	mov	r1, r4
 800465a:	008a      	lsls	r2, r1, #2
 800465c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004660:	f7fb fe0e 	bl	8000280 <__aeabi_uldivmod>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4b60      	ldr	r3, [pc, #384]	@ (80047ec <UART_SetConfig+0x4e4>)
 800466a:	fba3 2302 	umull	r2, r3, r3, r2
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	011c      	lsls	r4, r3, #4
 8004672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004676:	2200      	movs	r2, #0
 8004678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800467c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004680:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004684:	4642      	mov	r2, r8
 8004686:	464b      	mov	r3, r9
 8004688:	1891      	adds	r1, r2, r2
 800468a:	61b9      	str	r1, [r7, #24]
 800468c:	415b      	adcs	r3, r3
 800468e:	61fb      	str	r3, [r7, #28]
 8004690:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004694:	4641      	mov	r1, r8
 8004696:	1851      	adds	r1, r2, r1
 8004698:	6139      	str	r1, [r7, #16]
 800469a:	4649      	mov	r1, r9
 800469c:	414b      	adcs	r3, r1
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046ac:	4659      	mov	r1, fp
 80046ae:	00cb      	lsls	r3, r1, #3
 80046b0:	4651      	mov	r1, sl
 80046b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046b6:	4651      	mov	r1, sl
 80046b8:	00ca      	lsls	r2, r1, #3
 80046ba:	4610      	mov	r0, r2
 80046bc:	4619      	mov	r1, r3
 80046be:	4603      	mov	r3, r0
 80046c0:	4642      	mov	r2, r8
 80046c2:	189b      	adds	r3, r3, r2
 80046c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046c8:	464b      	mov	r3, r9
 80046ca:	460a      	mov	r2, r1
 80046cc:	eb42 0303 	adc.w	r3, r2, r3
 80046d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046ec:	4649      	mov	r1, r9
 80046ee:	008b      	lsls	r3, r1, #2
 80046f0:	4641      	mov	r1, r8
 80046f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046f6:	4641      	mov	r1, r8
 80046f8:	008a      	lsls	r2, r1, #2
 80046fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046fe:	f7fb fdbf 	bl	8000280 <__aeabi_uldivmod>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4611      	mov	r1, r2
 8004708:	4b38      	ldr	r3, [pc, #224]	@ (80047ec <UART_SetConfig+0x4e4>)
 800470a:	fba3 2301 	umull	r2, r3, r3, r1
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	2264      	movs	r2, #100	@ 0x64
 8004712:	fb02 f303 	mul.w	r3, r2, r3
 8004716:	1acb      	subs	r3, r1, r3
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	3332      	adds	r3, #50	@ 0x32
 800471c:	4a33      	ldr	r2, [pc, #204]	@ (80047ec <UART_SetConfig+0x4e4>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004728:	441c      	add	r4, r3
 800472a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800472e:	2200      	movs	r2, #0
 8004730:	673b      	str	r3, [r7, #112]	@ 0x70
 8004732:	677a      	str	r2, [r7, #116]	@ 0x74
 8004734:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004738:	4642      	mov	r2, r8
 800473a:	464b      	mov	r3, r9
 800473c:	1891      	adds	r1, r2, r2
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	415b      	adcs	r3, r3
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004748:	4641      	mov	r1, r8
 800474a:	1851      	adds	r1, r2, r1
 800474c:	6039      	str	r1, [r7, #0]
 800474e:	4649      	mov	r1, r9
 8004750:	414b      	adcs	r3, r1
 8004752:	607b      	str	r3, [r7, #4]
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004760:	4659      	mov	r1, fp
 8004762:	00cb      	lsls	r3, r1, #3
 8004764:	4651      	mov	r1, sl
 8004766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800476a:	4651      	mov	r1, sl
 800476c:	00ca      	lsls	r2, r1, #3
 800476e:	4610      	mov	r0, r2
 8004770:	4619      	mov	r1, r3
 8004772:	4603      	mov	r3, r0
 8004774:	4642      	mov	r2, r8
 8004776:	189b      	adds	r3, r3, r2
 8004778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800477a:	464b      	mov	r3, r9
 800477c:	460a      	mov	r2, r1
 800477e:	eb42 0303 	adc.w	r3, r2, r3
 8004782:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	663b      	str	r3, [r7, #96]	@ 0x60
 800478e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800479c:	4649      	mov	r1, r9
 800479e:	008b      	lsls	r3, r1, #2
 80047a0:	4641      	mov	r1, r8
 80047a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047a6:	4641      	mov	r1, r8
 80047a8:	008a      	lsls	r2, r1, #2
 80047aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047ae:	f7fb fd67 	bl	8000280 <__aeabi_uldivmod>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4b0d      	ldr	r3, [pc, #52]	@ (80047ec <UART_SetConfig+0x4e4>)
 80047b8:	fba3 1302 	umull	r1, r3, r3, r2
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	2164      	movs	r1, #100	@ 0x64
 80047c0:	fb01 f303 	mul.w	r3, r1, r3
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	3332      	adds	r3, #50	@ 0x32
 80047ca:	4a08      	ldr	r2, [pc, #32]	@ (80047ec <UART_SetConfig+0x4e4>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	f003 020f 	and.w	r2, r3, #15
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4422      	add	r2, r4
 80047de:	609a      	str	r2, [r3, #8]
}
 80047e0:	bf00      	nop
 80047e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047e6:	46bd      	mov	sp, r7
 80047e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ec:	51eb851f 	.word	0x51eb851f

080047f0 <std>:
 80047f0:	2300      	movs	r3, #0
 80047f2:	b510      	push	{r4, lr}
 80047f4:	4604      	mov	r4, r0
 80047f6:	e9c0 3300 	strd	r3, r3, [r0]
 80047fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047fe:	6083      	str	r3, [r0, #8]
 8004800:	8181      	strh	r1, [r0, #12]
 8004802:	6643      	str	r3, [r0, #100]	@ 0x64
 8004804:	81c2      	strh	r2, [r0, #14]
 8004806:	6183      	str	r3, [r0, #24]
 8004808:	4619      	mov	r1, r3
 800480a:	2208      	movs	r2, #8
 800480c:	305c      	adds	r0, #92	@ 0x5c
 800480e:	f000 f9f9 	bl	8004c04 <memset>
 8004812:	4b0d      	ldr	r3, [pc, #52]	@ (8004848 <std+0x58>)
 8004814:	6263      	str	r3, [r4, #36]	@ 0x24
 8004816:	4b0d      	ldr	r3, [pc, #52]	@ (800484c <std+0x5c>)
 8004818:	62a3      	str	r3, [r4, #40]	@ 0x28
 800481a:	4b0d      	ldr	r3, [pc, #52]	@ (8004850 <std+0x60>)
 800481c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800481e:	4b0d      	ldr	r3, [pc, #52]	@ (8004854 <std+0x64>)
 8004820:	6323      	str	r3, [r4, #48]	@ 0x30
 8004822:	4b0d      	ldr	r3, [pc, #52]	@ (8004858 <std+0x68>)
 8004824:	6224      	str	r4, [r4, #32]
 8004826:	429c      	cmp	r4, r3
 8004828:	d006      	beq.n	8004838 <std+0x48>
 800482a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800482e:	4294      	cmp	r4, r2
 8004830:	d002      	beq.n	8004838 <std+0x48>
 8004832:	33d0      	adds	r3, #208	@ 0xd0
 8004834:	429c      	cmp	r4, r3
 8004836:	d105      	bne.n	8004844 <std+0x54>
 8004838:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800483c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004840:	f000 ba58 	b.w	8004cf4 <__retarget_lock_init_recursive>
 8004844:	bd10      	pop	{r4, pc}
 8004846:	bf00      	nop
 8004848:	08004a55 	.word	0x08004a55
 800484c:	08004a77 	.word	0x08004a77
 8004850:	08004aaf 	.word	0x08004aaf
 8004854:	08004ad3 	.word	0x08004ad3
 8004858:	2000012c 	.word	0x2000012c

0800485c <stdio_exit_handler>:
 800485c:	4a02      	ldr	r2, [pc, #8]	@ (8004868 <stdio_exit_handler+0xc>)
 800485e:	4903      	ldr	r1, [pc, #12]	@ (800486c <stdio_exit_handler+0x10>)
 8004860:	4803      	ldr	r0, [pc, #12]	@ (8004870 <stdio_exit_handler+0x14>)
 8004862:	f000 b869 	b.w	8004938 <_fwalk_sglue>
 8004866:	bf00      	nop
 8004868:	2000000c 	.word	0x2000000c
 800486c:	08005591 	.word	0x08005591
 8004870:	2000001c 	.word	0x2000001c

08004874 <cleanup_stdio>:
 8004874:	6841      	ldr	r1, [r0, #4]
 8004876:	4b0c      	ldr	r3, [pc, #48]	@ (80048a8 <cleanup_stdio+0x34>)
 8004878:	4299      	cmp	r1, r3
 800487a:	b510      	push	{r4, lr}
 800487c:	4604      	mov	r4, r0
 800487e:	d001      	beq.n	8004884 <cleanup_stdio+0x10>
 8004880:	f000 fe86 	bl	8005590 <_fflush_r>
 8004884:	68a1      	ldr	r1, [r4, #8]
 8004886:	4b09      	ldr	r3, [pc, #36]	@ (80048ac <cleanup_stdio+0x38>)
 8004888:	4299      	cmp	r1, r3
 800488a:	d002      	beq.n	8004892 <cleanup_stdio+0x1e>
 800488c:	4620      	mov	r0, r4
 800488e:	f000 fe7f 	bl	8005590 <_fflush_r>
 8004892:	68e1      	ldr	r1, [r4, #12]
 8004894:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <cleanup_stdio+0x3c>)
 8004896:	4299      	cmp	r1, r3
 8004898:	d004      	beq.n	80048a4 <cleanup_stdio+0x30>
 800489a:	4620      	mov	r0, r4
 800489c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048a0:	f000 be76 	b.w	8005590 <_fflush_r>
 80048a4:	bd10      	pop	{r4, pc}
 80048a6:	bf00      	nop
 80048a8:	2000012c 	.word	0x2000012c
 80048ac:	20000194 	.word	0x20000194
 80048b0:	200001fc 	.word	0x200001fc

080048b4 <global_stdio_init.part.0>:
 80048b4:	b510      	push	{r4, lr}
 80048b6:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <global_stdio_init.part.0+0x30>)
 80048b8:	4c0b      	ldr	r4, [pc, #44]	@ (80048e8 <global_stdio_init.part.0+0x34>)
 80048ba:	4a0c      	ldr	r2, [pc, #48]	@ (80048ec <global_stdio_init.part.0+0x38>)
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	4620      	mov	r0, r4
 80048c0:	2200      	movs	r2, #0
 80048c2:	2104      	movs	r1, #4
 80048c4:	f7ff ff94 	bl	80047f0 <std>
 80048c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048cc:	2201      	movs	r2, #1
 80048ce:	2109      	movs	r1, #9
 80048d0:	f7ff ff8e 	bl	80047f0 <std>
 80048d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048d8:	2202      	movs	r2, #2
 80048da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048de:	2112      	movs	r1, #18
 80048e0:	f7ff bf86 	b.w	80047f0 <std>
 80048e4:	20000264 	.word	0x20000264
 80048e8:	2000012c 	.word	0x2000012c
 80048ec:	0800485d 	.word	0x0800485d

080048f0 <__sfp_lock_acquire>:
 80048f0:	4801      	ldr	r0, [pc, #4]	@ (80048f8 <__sfp_lock_acquire+0x8>)
 80048f2:	f000 ba00 	b.w	8004cf6 <__retarget_lock_acquire_recursive>
 80048f6:	bf00      	nop
 80048f8:	2000026d 	.word	0x2000026d

080048fc <__sfp_lock_release>:
 80048fc:	4801      	ldr	r0, [pc, #4]	@ (8004904 <__sfp_lock_release+0x8>)
 80048fe:	f000 b9fb 	b.w	8004cf8 <__retarget_lock_release_recursive>
 8004902:	bf00      	nop
 8004904:	2000026d 	.word	0x2000026d

08004908 <__sinit>:
 8004908:	b510      	push	{r4, lr}
 800490a:	4604      	mov	r4, r0
 800490c:	f7ff fff0 	bl	80048f0 <__sfp_lock_acquire>
 8004910:	6a23      	ldr	r3, [r4, #32]
 8004912:	b11b      	cbz	r3, 800491c <__sinit+0x14>
 8004914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004918:	f7ff bff0 	b.w	80048fc <__sfp_lock_release>
 800491c:	4b04      	ldr	r3, [pc, #16]	@ (8004930 <__sinit+0x28>)
 800491e:	6223      	str	r3, [r4, #32]
 8004920:	4b04      	ldr	r3, [pc, #16]	@ (8004934 <__sinit+0x2c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f5      	bne.n	8004914 <__sinit+0xc>
 8004928:	f7ff ffc4 	bl	80048b4 <global_stdio_init.part.0>
 800492c:	e7f2      	b.n	8004914 <__sinit+0xc>
 800492e:	bf00      	nop
 8004930:	08004875 	.word	0x08004875
 8004934:	20000264 	.word	0x20000264

08004938 <_fwalk_sglue>:
 8004938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800493c:	4607      	mov	r7, r0
 800493e:	4688      	mov	r8, r1
 8004940:	4614      	mov	r4, r2
 8004942:	2600      	movs	r6, #0
 8004944:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004948:	f1b9 0901 	subs.w	r9, r9, #1
 800494c:	d505      	bpl.n	800495a <_fwalk_sglue+0x22>
 800494e:	6824      	ldr	r4, [r4, #0]
 8004950:	2c00      	cmp	r4, #0
 8004952:	d1f7      	bne.n	8004944 <_fwalk_sglue+0xc>
 8004954:	4630      	mov	r0, r6
 8004956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800495a:	89ab      	ldrh	r3, [r5, #12]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d907      	bls.n	8004970 <_fwalk_sglue+0x38>
 8004960:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004964:	3301      	adds	r3, #1
 8004966:	d003      	beq.n	8004970 <_fwalk_sglue+0x38>
 8004968:	4629      	mov	r1, r5
 800496a:	4638      	mov	r0, r7
 800496c:	47c0      	blx	r8
 800496e:	4306      	orrs	r6, r0
 8004970:	3568      	adds	r5, #104	@ 0x68
 8004972:	e7e9      	b.n	8004948 <_fwalk_sglue+0x10>

08004974 <iprintf>:
 8004974:	b40f      	push	{r0, r1, r2, r3}
 8004976:	b507      	push	{r0, r1, r2, lr}
 8004978:	4906      	ldr	r1, [pc, #24]	@ (8004994 <iprintf+0x20>)
 800497a:	ab04      	add	r3, sp, #16
 800497c:	6808      	ldr	r0, [r1, #0]
 800497e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004982:	6881      	ldr	r1, [r0, #8]
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	f000 fadb 	bl	8004f40 <_vfiprintf_r>
 800498a:	b003      	add	sp, #12
 800498c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004990:	b004      	add	sp, #16
 8004992:	4770      	bx	lr
 8004994:	20000018 	.word	0x20000018

08004998 <_puts_r>:
 8004998:	6a03      	ldr	r3, [r0, #32]
 800499a:	b570      	push	{r4, r5, r6, lr}
 800499c:	6884      	ldr	r4, [r0, #8]
 800499e:	4605      	mov	r5, r0
 80049a0:	460e      	mov	r6, r1
 80049a2:	b90b      	cbnz	r3, 80049a8 <_puts_r+0x10>
 80049a4:	f7ff ffb0 	bl	8004908 <__sinit>
 80049a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049aa:	07db      	lsls	r3, r3, #31
 80049ac:	d405      	bmi.n	80049ba <_puts_r+0x22>
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	0598      	lsls	r0, r3, #22
 80049b2:	d402      	bmi.n	80049ba <_puts_r+0x22>
 80049b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049b6:	f000 f99e 	bl	8004cf6 <__retarget_lock_acquire_recursive>
 80049ba:	89a3      	ldrh	r3, [r4, #12]
 80049bc:	0719      	lsls	r1, r3, #28
 80049be:	d502      	bpl.n	80049c6 <_puts_r+0x2e>
 80049c0:	6923      	ldr	r3, [r4, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d135      	bne.n	8004a32 <_puts_r+0x9a>
 80049c6:	4621      	mov	r1, r4
 80049c8:	4628      	mov	r0, r5
 80049ca:	f000 f8c5 	bl	8004b58 <__swsetup_r>
 80049ce:	b380      	cbz	r0, 8004a32 <_puts_r+0x9a>
 80049d0:	f04f 35ff 	mov.w	r5, #4294967295
 80049d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049d6:	07da      	lsls	r2, r3, #31
 80049d8:	d405      	bmi.n	80049e6 <_puts_r+0x4e>
 80049da:	89a3      	ldrh	r3, [r4, #12]
 80049dc:	059b      	lsls	r3, r3, #22
 80049de:	d402      	bmi.n	80049e6 <_puts_r+0x4e>
 80049e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049e2:	f000 f989 	bl	8004cf8 <__retarget_lock_release_recursive>
 80049e6:	4628      	mov	r0, r5
 80049e8:	bd70      	pop	{r4, r5, r6, pc}
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	da04      	bge.n	80049f8 <_puts_r+0x60>
 80049ee:	69a2      	ldr	r2, [r4, #24]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	dc17      	bgt.n	8004a24 <_puts_r+0x8c>
 80049f4:	290a      	cmp	r1, #10
 80049f6:	d015      	beq.n	8004a24 <_puts_r+0x8c>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	6022      	str	r2, [r4, #0]
 80049fe:	7019      	strb	r1, [r3, #0]
 8004a00:	68a3      	ldr	r3, [r4, #8]
 8004a02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a06:	3b01      	subs	r3, #1
 8004a08:	60a3      	str	r3, [r4, #8]
 8004a0a:	2900      	cmp	r1, #0
 8004a0c:	d1ed      	bne.n	80049ea <_puts_r+0x52>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	da11      	bge.n	8004a36 <_puts_r+0x9e>
 8004a12:	4622      	mov	r2, r4
 8004a14:	210a      	movs	r1, #10
 8004a16:	4628      	mov	r0, r5
 8004a18:	f000 f85f 	bl	8004ada <__swbuf_r>
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	d0d7      	beq.n	80049d0 <_puts_r+0x38>
 8004a20:	250a      	movs	r5, #10
 8004a22:	e7d7      	b.n	80049d4 <_puts_r+0x3c>
 8004a24:	4622      	mov	r2, r4
 8004a26:	4628      	mov	r0, r5
 8004a28:	f000 f857 	bl	8004ada <__swbuf_r>
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d1e7      	bne.n	8004a00 <_puts_r+0x68>
 8004a30:	e7ce      	b.n	80049d0 <_puts_r+0x38>
 8004a32:	3e01      	subs	r6, #1
 8004a34:	e7e4      	b.n	8004a00 <_puts_r+0x68>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	6022      	str	r2, [r4, #0]
 8004a3c:	220a      	movs	r2, #10
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	e7ee      	b.n	8004a20 <_puts_r+0x88>
	...

08004a44 <puts>:
 8004a44:	4b02      	ldr	r3, [pc, #8]	@ (8004a50 <puts+0xc>)
 8004a46:	4601      	mov	r1, r0
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	f7ff bfa5 	b.w	8004998 <_puts_r>
 8004a4e:	bf00      	nop
 8004a50:	20000018 	.word	0x20000018

08004a54 <__sread>:
 8004a54:	b510      	push	{r4, lr}
 8004a56:	460c      	mov	r4, r1
 8004a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a5c:	f000 f8fc 	bl	8004c58 <_read_r>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	bfab      	itete	ge
 8004a64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a66:	89a3      	ldrhlt	r3, [r4, #12]
 8004a68:	181b      	addge	r3, r3, r0
 8004a6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a6e:	bfac      	ite	ge
 8004a70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a72:	81a3      	strhlt	r3, [r4, #12]
 8004a74:	bd10      	pop	{r4, pc}

08004a76 <__swrite>:
 8004a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a7a:	461f      	mov	r7, r3
 8004a7c:	898b      	ldrh	r3, [r1, #12]
 8004a7e:	05db      	lsls	r3, r3, #23
 8004a80:	4605      	mov	r5, r0
 8004a82:	460c      	mov	r4, r1
 8004a84:	4616      	mov	r6, r2
 8004a86:	d505      	bpl.n	8004a94 <__swrite+0x1e>
 8004a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f000 f8d0 	bl	8004c34 <_lseek_r>
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a9e:	81a3      	strh	r3, [r4, #12]
 8004aa0:	4632      	mov	r2, r6
 8004aa2:	463b      	mov	r3, r7
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aaa:	f000 b8e7 	b.w	8004c7c <_write_r>

08004aae <__sseek>:
 8004aae:	b510      	push	{r4, lr}
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab6:	f000 f8bd 	bl	8004c34 <_lseek_r>
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	bf15      	itete	ne
 8004ac0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ac2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ac6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004aca:	81a3      	strheq	r3, [r4, #12]
 8004acc:	bf18      	it	ne
 8004ace:	81a3      	strhne	r3, [r4, #12]
 8004ad0:	bd10      	pop	{r4, pc}

08004ad2 <__sclose>:
 8004ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad6:	f000 b89d 	b.w	8004c14 <_close_r>

08004ada <__swbuf_r>:
 8004ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004adc:	460e      	mov	r6, r1
 8004ade:	4614      	mov	r4, r2
 8004ae0:	4605      	mov	r5, r0
 8004ae2:	b118      	cbz	r0, 8004aec <__swbuf_r+0x12>
 8004ae4:	6a03      	ldr	r3, [r0, #32]
 8004ae6:	b90b      	cbnz	r3, 8004aec <__swbuf_r+0x12>
 8004ae8:	f7ff ff0e 	bl	8004908 <__sinit>
 8004aec:	69a3      	ldr	r3, [r4, #24]
 8004aee:	60a3      	str	r3, [r4, #8]
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	071a      	lsls	r2, r3, #28
 8004af4:	d501      	bpl.n	8004afa <__swbuf_r+0x20>
 8004af6:	6923      	ldr	r3, [r4, #16]
 8004af8:	b943      	cbnz	r3, 8004b0c <__swbuf_r+0x32>
 8004afa:	4621      	mov	r1, r4
 8004afc:	4628      	mov	r0, r5
 8004afe:	f000 f82b 	bl	8004b58 <__swsetup_r>
 8004b02:	b118      	cbz	r0, 8004b0c <__swbuf_r+0x32>
 8004b04:	f04f 37ff 	mov.w	r7, #4294967295
 8004b08:	4638      	mov	r0, r7
 8004b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	6922      	ldr	r2, [r4, #16]
 8004b10:	1a98      	subs	r0, r3, r2
 8004b12:	6963      	ldr	r3, [r4, #20]
 8004b14:	b2f6      	uxtb	r6, r6
 8004b16:	4283      	cmp	r3, r0
 8004b18:	4637      	mov	r7, r6
 8004b1a:	dc05      	bgt.n	8004b28 <__swbuf_r+0x4e>
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f000 fd36 	bl	8005590 <_fflush_r>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d1ed      	bne.n	8004b04 <__swbuf_r+0x2a>
 8004b28:	68a3      	ldr	r3, [r4, #8]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	60a3      	str	r3, [r4, #8]
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	6022      	str	r2, [r4, #0]
 8004b34:	701e      	strb	r6, [r3, #0]
 8004b36:	6962      	ldr	r2, [r4, #20]
 8004b38:	1c43      	adds	r3, r0, #1
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d004      	beq.n	8004b48 <__swbuf_r+0x6e>
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	07db      	lsls	r3, r3, #31
 8004b42:	d5e1      	bpl.n	8004b08 <__swbuf_r+0x2e>
 8004b44:	2e0a      	cmp	r6, #10
 8004b46:	d1df      	bne.n	8004b08 <__swbuf_r+0x2e>
 8004b48:	4621      	mov	r1, r4
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f000 fd20 	bl	8005590 <_fflush_r>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d0d9      	beq.n	8004b08 <__swbuf_r+0x2e>
 8004b54:	e7d6      	b.n	8004b04 <__swbuf_r+0x2a>
	...

08004b58 <__swsetup_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4b29      	ldr	r3, [pc, #164]	@ (8004c00 <__swsetup_r+0xa8>)
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	460c      	mov	r4, r1
 8004b62:	b118      	cbz	r0, 8004b6c <__swsetup_r+0x14>
 8004b64:	6a03      	ldr	r3, [r0, #32]
 8004b66:	b90b      	cbnz	r3, 8004b6c <__swsetup_r+0x14>
 8004b68:	f7ff fece 	bl	8004908 <__sinit>
 8004b6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b70:	0719      	lsls	r1, r3, #28
 8004b72:	d422      	bmi.n	8004bba <__swsetup_r+0x62>
 8004b74:	06da      	lsls	r2, r3, #27
 8004b76:	d407      	bmi.n	8004b88 <__swsetup_r+0x30>
 8004b78:	2209      	movs	r2, #9
 8004b7a:	602a      	str	r2, [r5, #0]
 8004b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b80:	81a3      	strh	r3, [r4, #12]
 8004b82:	f04f 30ff 	mov.w	r0, #4294967295
 8004b86:	e033      	b.n	8004bf0 <__swsetup_r+0x98>
 8004b88:	0758      	lsls	r0, r3, #29
 8004b8a:	d512      	bpl.n	8004bb2 <__swsetup_r+0x5a>
 8004b8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b8e:	b141      	cbz	r1, 8004ba2 <__swsetup_r+0x4a>
 8004b90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b94:	4299      	cmp	r1, r3
 8004b96:	d002      	beq.n	8004b9e <__swsetup_r+0x46>
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f000 f8af 	bl	8004cfc <_free_r>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ba2:	89a3      	ldrh	r3, [r4, #12]
 8004ba4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ba8:	81a3      	strh	r3, [r4, #12]
 8004baa:	2300      	movs	r3, #0
 8004bac:	6063      	str	r3, [r4, #4]
 8004bae:	6923      	ldr	r3, [r4, #16]
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	f043 0308 	orr.w	r3, r3, #8
 8004bb8:	81a3      	strh	r3, [r4, #12]
 8004bba:	6923      	ldr	r3, [r4, #16]
 8004bbc:	b94b      	cbnz	r3, 8004bd2 <__swsetup_r+0x7a>
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bc8:	d003      	beq.n	8004bd2 <__swsetup_r+0x7a>
 8004bca:	4621      	mov	r1, r4
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f000 fd2d 	bl	800562c <__smakebuf_r>
 8004bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bd6:	f013 0201 	ands.w	r2, r3, #1
 8004bda:	d00a      	beq.n	8004bf2 <__swsetup_r+0x9a>
 8004bdc:	2200      	movs	r2, #0
 8004bde:	60a2      	str	r2, [r4, #8]
 8004be0:	6962      	ldr	r2, [r4, #20]
 8004be2:	4252      	negs	r2, r2
 8004be4:	61a2      	str	r2, [r4, #24]
 8004be6:	6922      	ldr	r2, [r4, #16]
 8004be8:	b942      	cbnz	r2, 8004bfc <__swsetup_r+0xa4>
 8004bea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004bee:	d1c5      	bne.n	8004b7c <__swsetup_r+0x24>
 8004bf0:	bd38      	pop	{r3, r4, r5, pc}
 8004bf2:	0799      	lsls	r1, r3, #30
 8004bf4:	bf58      	it	pl
 8004bf6:	6962      	ldrpl	r2, [r4, #20]
 8004bf8:	60a2      	str	r2, [r4, #8]
 8004bfa:	e7f4      	b.n	8004be6 <__swsetup_r+0x8e>
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	e7f7      	b.n	8004bf0 <__swsetup_r+0x98>
 8004c00:	20000018 	.word	0x20000018

08004c04 <memset>:
 8004c04:	4402      	add	r2, r0
 8004c06:	4603      	mov	r3, r0
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d100      	bne.n	8004c0e <memset+0xa>
 8004c0c:	4770      	bx	lr
 8004c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c12:	e7f9      	b.n	8004c08 <memset+0x4>

08004c14 <_close_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	4d06      	ldr	r5, [pc, #24]	@ (8004c30 <_close_r+0x1c>)
 8004c18:	2300      	movs	r3, #0
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	4608      	mov	r0, r1
 8004c1e:	602b      	str	r3, [r5, #0]
 8004c20:	f7fc f843 	bl	8000caa <_close>
 8004c24:	1c43      	adds	r3, r0, #1
 8004c26:	d102      	bne.n	8004c2e <_close_r+0x1a>
 8004c28:	682b      	ldr	r3, [r5, #0]
 8004c2a:	b103      	cbz	r3, 8004c2e <_close_r+0x1a>
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	bd38      	pop	{r3, r4, r5, pc}
 8004c30:	20000268 	.word	0x20000268

08004c34 <_lseek_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	4d07      	ldr	r5, [pc, #28]	@ (8004c54 <_lseek_r+0x20>)
 8004c38:	4604      	mov	r4, r0
 8004c3a:	4608      	mov	r0, r1
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	2200      	movs	r2, #0
 8004c40:	602a      	str	r2, [r5, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	f7fc f858 	bl	8000cf8 <_lseek>
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	d102      	bne.n	8004c52 <_lseek_r+0x1e>
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	b103      	cbz	r3, 8004c52 <_lseek_r+0x1e>
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	20000268 	.word	0x20000268

08004c58 <_read_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4d07      	ldr	r5, [pc, #28]	@ (8004c78 <_read_r+0x20>)
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	4608      	mov	r0, r1
 8004c60:	4611      	mov	r1, r2
 8004c62:	2200      	movs	r2, #0
 8004c64:	602a      	str	r2, [r5, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f7fc f802 	bl	8000c70 <_read>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d102      	bne.n	8004c76 <_read_r+0x1e>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	b103      	cbz	r3, 8004c76 <_read_r+0x1e>
 8004c74:	6023      	str	r3, [r4, #0]
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
 8004c78:	20000268 	.word	0x20000268

08004c7c <_write_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4d07      	ldr	r5, [pc, #28]	@ (8004c9c <_write_r+0x20>)
 8004c80:	4604      	mov	r4, r0
 8004c82:	4608      	mov	r0, r1
 8004c84:	4611      	mov	r1, r2
 8004c86:	2200      	movs	r2, #0
 8004c88:	602a      	str	r2, [r5, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f7fb fcb5 	bl	80005fa <_write>
 8004c90:	1c43      	adds	r3, r0, #1
 8004c92:	d102      	bne.n	8004c9a <_write_r+0x1e>
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	b103      	cbz	r3, 8004c9a <_write_r+0x1e>
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	bd38      	pop	{r3, r4, r5, pc}
 8004c9c:	20000268 	.word	0x20000268

08004ca0 <__errno>:
 8004ca0:	4b01      	ldr	r3, [pc, #4]	@ (8004ca8 <__errno+0x8>)
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000018 	.word	0x20000018

08004cac <__libc_init_array>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	4d0d      	ldr	r5, [pc, #52]	@ (8004ce4 <__libc_init_array+0x38>)
 8004cb0:	4c0d      	ldr	r4, [pc, #52]	@ (8004ce8 <__libc_init_array+0x3c>)
 8004cb2:	1b64      	subs	r4, r4, r5
 8004cb4:	10a4      	asrs	r4, r4, #2
 8004cb6:	2600      	movs	r6, #0
 8004cb8:	42a6      	cmp	r6, r4
 8004cba:	d109      	bne.n	8004cd0 <__libc_init_array+0x24>
 8004cbc:	4d0b      	ldr	r5, [pc, #44]	@ (8004cec <__libc_init_array+0x40>)
 8004cbe:	4c0c      	ldr	r4, [pc, #48]	@ (8004cf0 <__libc_init_array+0x44>)
 8004cc0:	f000 fd22 	bl	8005708 <_init>
 8004cc4:	1b64      	subs	r4, r4, r5
 8004cc6:	10a4      	asrs	r4, r4, #2
 8004cc8:	2600      	movs	r6, #0
 8004cca:	42a6      	cmp	r6, r4
 8004ccc:	d105      	bne.n	8004cda <__libc_init_array+0x2e>
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
 8004cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd4:	4798      	blx	r3
 8004cd6:	3601      	adds	r6, #1
 8004cd8:	e7ee      	b.n	8004cb8 <__libc_init_array+0xc>
 8004cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cde:	4798      	blx	r3
 8004ce0:	3601      	adds	r6, #1
 8004ce2:	e7f2      	b.n	8004cca <__libc_init_array+0x1e>
 8004ce4:	080057f8 	.word	0x080057f8
 8004ce8:	080057f8 	.word	0x080057f8
 8004cec:	080057f8 	.word	0x080057f8
 8004cf0:	080057fc 	.word	0x080057fc

08004cf4 <__retarget_lock_init_recursive>:
 8004cf4:	4770      	bx	lr

08004cf6 <__retarget_lock_acquire_recursive>:
 8004cf6:	4770      	bx	lr

08004cf8 <__retarget_lock_release_recursive>:
 8004cf8:	4770      	bx	lr
	...

08004cfc <_free_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4605      	mov	r5, r0
 8004d00:	2900      	cmp	r1, #0
 8004d02:	d041      	beq.n	8004d88 <_free_r+0x8c>
 8004d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d08:	1f0c      	subs	r4, r1, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	bfb8      	it	lt
 8004d0e:	18e4      	addlt	r4, r4, r3
 8004d10:	f000 f8e0 	bl	8004ed4 <__malloc_lock>
 8004d14:	4a1d      	ldr	r2, [pc, #116]	@ (8004d8c <_free_r+0x90>)
 8004d16:	6813      	ldr	r3, [r2, #0]
 8004d18:	b933      	cbnz	r3, 8004d28 <_free_r+0x2c>
 8004d1a:	6063      	str	r3, [r4, #4]
 8004d1c:	6014      	str	r4, [r2, #0]
 8004d1e:	4628      	mov	r0, r5
 8004d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d24:	f000 b8dc 	b.w	8004ee0 <__malloc_unlock>
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	d908      	bls.n	8004d3e <_free_r+0x42>
 8004d2c:	6820      	ldr	r0, [r4, #0]
 8004d2e:	1821      	adds	r1, r4, r0
 8004d30:	428b      	cmp	r3, r1
 8004d32:	bf01      	itttt	eq
 8004d34:	6819      	ldreq	r1, [r3, #0]
 8004d36:	685b      	ldreq	r3, [r3, #4]
 8004d38:	1809      	addeq	r1, r1, r0
 8004d3a:	6021      	streq	r1, [r4, #0]
 8004d3c:	e7ed      	b.n	8004d1a <_free_r+0x1e>
 8004d3e:	461a      	mov	r2, r3
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	b10b      	cbz	r3, 8004d48 <_free_r+0x4c>
 8004d44:	42a3      	cmp	r3, r4
 8004d46:	d9fa      	bls.n	8004d3e <_free_r+0x42>
 8004d48:	6811      	ldr	r1, [r2, #0]
 8004d4a:	1850      	adds	r0, r2, r1
 8004d4c:	42a0      	cmp	r0, r4
 8004d4e:	d10b      	bne.n	8004d68 <_free_r+0x6c>
 8004d50:	6820      	ldr	r0, [r4, #0]
 8004d52:	4401      	add	r1, r0
 8004d54:	1850      	adds	r0, r2, r1
 8004d56:	4283      	cmp	r3, r0
 8004d58:	6011      	str	r1, [r2, #0]
 8004d5a:	d1e0      	bne.n	8004d1e <_free_r+0x22>
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	6053      	str	r3, [r2, #4]
 8004d62:	4408      	add	r0, r1
 8004d64:	6010      	str	r0, [r2, #0]
 8004d66:	e7da      	b.n	8004d1e <_free_r+0x22>
 8004d68:	d902      	bls.n	8004d70 <_free_r+0x74>
 8004d6a:	230c      	movs	r3, #12
 8004d6c:	602b      	str	r3, [r5, #0]
 8004d6e:	e7d6      	b.n	8004d1e <_free_r+0x22>
 8004d70:	6820      	ldr	r0, [r4, #0]
 8004d72:	1821      	adds	r1, r4, r0
 8004d74:	428b      	cmp	r3, r1
 8004d76:	bf04      	itt	eq
 8004d78:	6819      	ldreq	r1, [r3, #0]
 8004d7a:	685b      	ldreq	r3, [r3, #4]
 8004d7c:	6063      	str	r3, [r4, #4]
 8004d7e:	bf04      	itt	eq
 8004d80:	1809      	addeq	r1, r1, r0
 8004d82:	6021      	streq	r1, [r4, #0]
 8004d84:	6054      	str	r4, [r2, #4]
 8004d86:	e7ca      	b.n	8004d1e <_free_r+0x22>
 8004d88:	bd38      	pop	{r3, r4, r5, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000274 	.word	0x20000274

08004d90 <sbrk_aligned>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	4e0f      	ldr	r6, [pc, #60]	@ (8004dd0 <sbrk_aligned+0x40>)
 8004d94:	460c      	mov	r4, r1
 8004d96:	6831      	ldr	r1, [r6, #0]
 8004d98:	4605      	mov	r5, r0
 8004d9a:	b911      	cbnz	r1, 8004da2 <sbrk_aligned+0x12>
 8004d9c:	f000 fca4 	bl	80056e8 <_sbrk_r>
 8004da0:	6030      	str	r0, [r6, #0]
 8004da2:	4621      	mov	r1, r4
 8004da4:	4628      	mov	r0, r5
 8004da6:	f000 fc9f 	bl	80056e8 <_sbrk_r>
 8004daa:	1c43      	adds	r3, r0, #1
 8004dac:	d103      	bne.n	8004db6 <sbrk_aligned+0x26>
 8004dae:	f04f 34ff 	mov.w	r4, #4294967295
 8004db2:	4620      	mov	r0, r4
 8004db4:	bd70      	pop	{r4, r5, r6, pc}
 8004db6:	1cc4      	adds	r4, r0, #3
 8004db8:	f024 0403 	bic.w	r4, r4, #3
 8004dbc:	42a0      	cmp	r0, r4
 8004dbe:	d0f8      	beq.n	8004db2 <sbrk_aligned+0x22>
 8004dc0:	1a21      	subs	r1, r4, r0
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f000 fc90 	bl	80056e8 <_sbrk_r>
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d1f2      	bne.n	8004db2 <sbrk_aligned+0x22>
 8004dcc:	e7ef      	b.n	8004dae <sbrk_aligned+0x1e>
 8004dce:	bf00      	nop
 8004dd0:	20000270 	.word	0x20000270

08004dd4 <_malloc_r>:
 8004dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd8:	1ccd      	adds	r5, r1, #3
 8004dda:	f025 0503 	bic.w	r5, r5, #3
 8004dde:	3508      	adds	r5, #8
 8004de0:	2d0c      	cmp	r5, #12
 8004de2:	bf38      	it	cc
 8004de4:	250c      	movcc	r5, #12
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	4606      	mov	r6, r0
 8004dea:	db01      	blt.n	8004df0 <_malloc_r+0x1c>
 8004dec:	42a9      	cmp	r1, r5
 8004dee:	d904      	bls.n	8004dfa <_malloc_r+0x26>
 8004df0:	230c      	movs	r3, #12
 8004df2:	6033      	str	r3, [r6, #0]
 8004df4:	2000      	movs	r0, #0
 8004df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ed0 <_malloc_r+0xfc>
 8004dfe:	f000 f869 	bl	8004ed4 <__malloc_lock>
 8004e02:	f8d8 3000 	ldr.w	r3, [r8]
 8004e06:	461c      	mov	r4, r3
 8004e08:	bb44      	cbnz	r4, 8004e5c <_malloc_r+0x88>
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	f7ff ffbf 	bl	8004d90 <sbrk_aligned>
 8004e12:	1c43      	adds	r3, r0, #1
 8004e14:	4604      	mov	r4, r0
 8004e16:	d158      	bne.n	8004eca <_malloc_r+0xf6>
 8004e18:	f8d8 4000 	ldr.w	r4, [r8]
 8004e1c:	4627      	mov	r7, r4
 8004e1e:	2f00      	cmp	r7, #0
 8004e20:	d143      	bne.n	8004eaa <_malloc_r+0xd6>
 8004e22:	2c00      	cmp	r4, #0
 8004e24:	d04b      	beq.n	8004ebe <_malloc_r+0xea>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	4639      	mov	r1, r7
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	eb04 0903 	add.w	r9, r4, r3
 8004e30:	f000 fc5a 	bl	80056e8 <_sbrk_r>
 8004e34:	4581      	cmp	r9, r0
 8004e36:	d142      	bne.n	8004ebe <_malloc_r+0xea>
 8004e38:	6821      	ldr	r1, [r4, #0]
 8004e3a:	1a6d      	subs	r5, r5, r1
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f7ff ffa6 	bl	8004d90 <sbrk_aligned>
 8004e44:	3001      	adds	r0, #1
 8004e46:	d03a      	beq.n	8004ebe <_malloc_r+0xea>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	442b      	add	r3, r5
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	bb62      	cbnz	r2, 8004eb0 <_malloc_r+0xdc>
 8004e56:	f8c8 7000 	str.w	r7, [r8]
 8004e5a:	e00f      	b.n	8004e7c <_malloc_r+0xa8>
 8004e5c:	6822      	ldr	r2, [r4, #0]
 8004e5e:	1b52      	subs	r2, r2, r5
 8004e60:	d420      	bmi.n	8004ea4 <_malloc_r+0xd0>
 8004e62:	2a0b      	cmp	r2, #11
 8004e64:	d917      	bls.n	8004e96 <_malloc_r+0xc2>
 8004e66:	1961      	adds	r1, r4, r5
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	6025      	str	r5, [r4, #0]
 8004e6c:	bf18      	it	ne
 8004e6e:	6059      	strne	r1, [r3, #4]
 8004e70:	6863      	ldr	r3, [r4, #4]
 8004e72:	bf08      	it	eq
 8004e74:	f8c8 1000 	streq.w	r1, [r8]
 8004e78:	5162      	str	r2, [r4, r5]
 8004e7a:	604b      	str	r3, [r1, #4]
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f000 f82f 	bl	8004ee0 <__malloc_unlock>
 8004e82:	f104 000b 	add.w	r0, r4, #11
 8004e86:	1d23      	adds	r3, r4, #4
 8004e88:	f020 0007 	bic.w	r0, r0, #7
 8004e8c:	1ac2      	subs	r2, r0, r3
 8004e8e:	bf1c      	itt	ne
 8004e90:	1a1b      	subne	r3, r3, r0
 8004e92:	50a3      	strne	r3, [r4, r2]
 8004e94:	e7af      	b.n	8004df6 <_malloc_r+0x22>
 8004e96:	6862      	ldr	r2, [r4, #4]
 8004e98:	42a3      	cmp	r3, r4
 8004e9a:	bf0c      	ite	eq
 8004e9c:	f8c8 2000 	streq.w	r2, [r8]
 8004ea0:	605a      	strne	r2, [r3, #4]
 8004ea2:	e7eb      	b.n	8004e7c <_malloc_r+0xa8>
 8004ea4:	4623      	mov	r3, r4
 8004ea6:	6864      	ldr	r4, [r4, #4]
 8004ea8:	e7ae      	b.n	8004e08 <_malloc_r+0x34>
 8004eaa:	463c      	mov	r4, r7
 8004eac:	687f      	ldr	r7, [r7, #4]
 8004eae:	e7b6      	b.n	8004e1e <_malloc_r+0x4a>
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	d1fb      	bne.n	8004eb0 <_malloc_r+0xdc>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6053      	str	r3, [r2, #4]
 8004ebc:	e7de      	b.n	8004e7c <_malloc_r+0xa8>
 8004ebe:	230c      	movs	r3, #12
 8004ec0:	6033      	str	r3, [r6, #0]
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	f000 f80c 	bl	8004ee0 <__malloc_unlock>
 8004ec8:	e794      	b.n	8004df4 <_malloc_r+0x20>
 8004eca:	6005      	str	r5, [r0, #0]
 8004ecc:	e7d6      	b.n	8004e7c <_malloc_r+0xa8>
 8004ece:	bf00      	nop
 8004ed0:	20000274 	.word	0x20000274

08004ed4 <__malloc_lock>:
 8004ed4:	4801      	ldr	r0, [pc, #4]	@ (8004edc <__malloc_lock+0x8>)
 8004ed6:	f7ff bf0e 	b.w	8004cf6 <__retarget_lock_acquire_recursive>
 8004eda:	bf00      	nop
 8004edc:	2000026c 	.word	0x2000026c

08004ee0 <__malloc_unlock>:
 8004ee0:	4801      	ldr	r0, [pc, #4]	@ (8004ee8 <__malloc_unlock+0x8>)
 8004ee2:	f7ff bf09 	b.w	8004cf8 <__retarget_lock_release_recursive>
 8004ee6:	bf00      	nop
 8004ee8:	2000026c 	.word	0x2000026c

08004eec <__sfputc_r>:
 8004eec:	6893      	ldr	r3, [r2, #8]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	b410      	push	{r4}
 8004ef4:	6093      	str	r3, [r2, #8]
 8004ef6:	da08      	bge.n	8004f0a <__sfputc_r+0x1e>
 8004ef8:	6994      	ldr	r4, [r2, #24]
 8004efa:	42a3      	cmp	r3, r4
 8004efc:	db01      	blt.n	8004f02 <__sfputc_r+0x16>
 8004efe:	290a      	cmp	r1, #10
 8004f00:	d103      	bne.n	8004f0a <__sfputc_r+0x1e>
 8004f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f06:	f7ff bde8 	b.w	8004ada <__swbuf_r>
 8004f0a:	6813      	ldr	r3, [r2, #0]
 8004f0c:	1c58      	adds	r0, r3, #1
 8004f0e:	6010      	str	r0, [r2, #0]
 8004f10:	7019      	strb	r1, [r3, #0]
 8004f12:	4608      	mov	r0, r1
 8004f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <__sfputs_r>:
 8004f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1c:	4606      	mov	r6, r0
 8004f1e:	460f      	mov	r7, r1
 8004f20:	4614      	mov	r4, r2
 8004f22:	18d5      	adds	r5, r2, r3
 8004f24:	42ac      	cmp	r4, r5
 8004f26:	d101      	bne.n	8004f2c <__sfputs_r+0x12>
 8004f28:	2000      	movs	r0, #0
 8004f2a:	e007      	b.n	8004f3c <__sfputs_r+0x22>
 8004f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f30:	463a      	mov	r2, r7
 8004f32:	4630      	mov	r0, r6
 8004f34:	f7ff ffda 	bl	8004eec <__sfputc_r>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d1f3      	bne.n	8004f24 <__sfputs_r+0xa>
 8004f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f40 <_vfiprintf_r>:
 8004f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f44:	460d      	mov	r5, r1
 8004f46:	b09d      	sub	sp, #116	@ 0x74
 8004f48:	4614      	mov	r4, r2
 8004f4a:	4698      	mov	r8, r3
 8004f4c:	4606      	mov	r6, r0
 8004f4e:	b118      	cbz	r0, 8004f58 <_vfiprintf_r+0x18>
 8004f50:	6a03      	ldr	r3, [r0, #32]
 8004f52:	b90b      	cbnz	r3, 8004f58 <_vfiprintf_r+0x18>
 8004f54:	f7ff fcd8 	bl	8004908 <__sinit>
 8004f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f5a:	07d9      	lsls	r1, r3, #31
 8004f5c:	d405      	bmi.n	8004f6a <_vfiprintf_r+0x2a>
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	059a      	lsls	r2, r3, #22
 8004f62:	d402      	bmi.n	8004f6a <_vfiprintf_r+0x2a>
 8004f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f66:	f7ff fec6 	bl	8004cf6 <__retarget_lock_acquire_recursive>
 8004f6a:	89ab      	ldrh	r3, [r5, #12]
 8004f6c:	071b      	lsls	r3, r3, #28
 8004f6e:	d501      	bpl.n	8004f74 <_vfiprintf_r+0x34>
 8004f70:	692b      	ldr	r3, [r5, #16]
 8004f72:	b99b      	cbnz	r3, 8004f9c <_vfiprintf_r+0x5c>
 8004f74:	4629      	mov	r1, r5
 8004f76:	4630      	mov	r0, r6
 8004f78:	f7ff fdee 	bl	8004b58 <__swsetup_r>
 8004f7c:	b170      	cbz	r0, 8004f9c <_vfiprintf_r+0x5c>
 8004f7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f80:	07dc      	lsls	r4, r3, #31
 8004f82:	d504      	bpl.n	8004f8e <_vfiprintf_r+0x4e>
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	b01d      	add	sp, #116	@ 0x74
 8004f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8e:	89ab      	ldrh	r3, [r5, #12]
 8004f90:	0598      	lsls	r0, r3, #22
 8004f92:	d4f7      	bmi.n	8004f84 <_vfiprintf_r+0x44>
 8004f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f96:	f7ff feaf 	bl	8004cf8 <__retarget_lock_release_recursive>
 8004f9a:	e7f3      	b.n	8004f84 <_vfiprintf_r+0x44>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004faa:	2330      	movs	r3, #48	@ 0x30
 8004fac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800515c <_vfiprintf_r+0x21c>
 8004fb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004fb4:	f04f 0901 	mov.w	r9, #1
 8004fb8:	4623      	mov	r3, r4
 8004fba:	469a      	mov	sl, r3
 8004fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fc0:	b10a      	cbz	r2, 8004fc6 <_vfiprintf_r+0x86>
 8004fc2:	2a25      	cmp	r2, #37	@ 0x25
 8004fc4:	d1f9      	bne.n	8004fba <_vfiprintf_r+0x7a>
 8004fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8004fca:	d00b      	beq.n	8004fe4 <_vfiprintf_r+0xa4>
 8004fcc:	465b      	mov	r3, fp
 8004fce:	4622      	mov	r2, r4
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	f7ff ffa1 	bl	8004f1a <__sfputs_r>
 8004fd8:	3001      	adds	r0, #1
 8004fda:	f000 80a7 	beq.w	800512c <_vfiprintf_r+0x1ec>
 8004fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fe0:	445a      	add	r2, fp
 8004fe2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 809f 	beq.w	800512c <_vfiprintf_r+0x1ec>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ff8:	f10a 0a01 	add.w	sl, sl, #1
 8004ffc:	9304      	str	r3, [sp, #16]
 8004ffe:	9307      	str	r3, [sp, #28]
 8005000:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005004:	931a      	str	r3, [sp, #104]	@ 0x68
 8005006:	4654      	mov	r4, sl
 8005008:	2205      	movs	r2, #5
 800500a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800500e:	4853      	ldr	r0, [pc, #332]	@ (800515c <_vfiprintf_r+0x21c>)
 8005010:	f7fb f8e6 	bl	80001e0 <memchr>
 8005014:	9a04      	ldr	r2, [sp, #16]
 8005016:	b9d8      	cbnz	r0, 8005050 <_vfiprintf_r+0x110>
 8005018:	06d1      	lsls	r1, r2, #27
 800501a:	bf44      	itt	mi
 800501c:	2320      	movmi	r3, #32
 800501e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005022:	0713      	lsls	r3, r2, #28
 8005024:	bf44      	itt	mi
 8005026:	232b      	movmi	r3, #43	@ 0x2b
 8005028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800502c:	f89a 3000 	ldrb.w	r3, [sl]
 8005030:	2b2a      	cmp	r3, #42	@ 0x2a
 8005032:	d015      	beq.n	8005060 <_vfiprintf_r+0x120>
 8005034:	9a07      	ldr	r2, [sp, #28]
 8005036:	4654      	mov	r4, sl
 8005038:	2000      	movs	r0, #0
 800503a:	f04f 0c0a 	mov.w	ip, #10
 800503e:	4621      	mov	r1, r4
 8005040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005044:	3b30      	subs	r3, #48	@ 0x30
 8005046:	2b09      	cmp	r3, #9
 8005048:	d94b      	bls.n	80050e2 <_vfiprintf_r+0x1a2>
 800504a:	b1b0      	cbz	r0, 800507a <_vfiprintf_r+0x13a>
 800504c:	9207      	str	r2, [sp, #28]
 800504e:	e014      	b.n	800507a <_vfiprintf_r+0x13a>
 8005050:	eba0 0308 	sub.w	r3, r0, r8
 8005054:	fa09 f303 	lsl.w	r3, r9, r3
 8005058:	4313      	orrs	r3, r2
 800505a:	9304      	str	r3, [sp, #16]
 800505c:	46a2      	mov	sl, r4
 800505e:	e7d2      	b.n	8005006 <_vfiprintf_r+0xc6>
 8005060:	9b03      	ldr	r3, [sp, #12]
 8005062:	1d19      	adds	r1, r3, #4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	9103      	str	r1, [sp, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	bfbb      	ittet	lt
 800506c:	425b      	neglt	r3, r3
 800506e:	f042 0202 	orrlt.w	r2, r2, #2
 8005072:	9307      	strge	r3, [sp, #28]
 8005074:	9307      	strlt	r3, [sp, #28]
 8005076:	bfb8      	it	lt
 8005078:	9204      	strlt	r2, [sp, #16]
 800507a:	7823      	ldrb	r3, [r4, #0]
 800507c:	2b2e      	cmp	r3, #46	@ 0x2e
 800507e:	d10a      	bne.n	8005096 <_vfiprintf_r+0x156>
 8005080:	7863      	ldrb	r3, [r4, #1]
 8005082:	2b2a      	cmp	r3, #42	@ 0x2a
 8005084:	d132      	bne.n	80050ec <_vfiprintf_r+0x1ac>
 8005086:	9b03      	ldr	r3, [sp, #12]
 8005088:	1d1a      	adds	r2, r3, #4
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	9203      	str	r2, [sp, #12]
 800508e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005092:	3402      	adds	r4, #2
 8005094:	9305      	str	r3, [sp, #20]
 8005096:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800516c <_vfiprintf_r+0x22c>
 800509a:	7821      	ldrb	r1, [r4, #0]
 800509c:	2203      	movs	r2, #3
 800509e:	4650      	mov	r0, sl
 80050a0:	f7fb f89e 	bl	80001e0 <memchr>
 80050a4:	b138      	cbz	r0, 80050b6 <_vfiprintf_r+0x176>
 80050a6:	9b04      	ldr	r3, [sp, #16]
 80050a8:	eba0 000a 	sub.w	r0, r0, sl
 80050ac:	2240      	movs	r2, #64	@ 0x40
 80050ae:	4082      	lsls	r2, r0
 80050b0:	4313      	orrs	r3, r2
 80050b2:	3401      	adds	r4, #1
 80050b4:	9304      	str	r3, [sp, #16]
 80050b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ba:	4829      	ldr	r0, [pc, #164]	@ (8005160 <_vfiprintf_r+0x220>)
 80050bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80050c0:	2206      	movs	r2, #6
 80050c2:	f7fb f88d 	bl	80001e0 <memchr>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d03f      	beq.n	800514a <_vfiprintf_r+0x20a>
 80050ca:	4b26      	ldr	r3, [pc, #152]	@ (8005164 <_vfiprintf_r+0x224>)
 80050cc:	bb1b      	cbnz	r3, 8005116 <_vfiprintf_r+0x1d6>
 80050ce:	9b03      	ldr	r3, [sp, #12]
 80050d0:	3307      	adds	r3, #7
 80050d2:	f023 0307 	bic.w	r3, r3, #7
 80050d6:	3308      	adds	r3, #8
 80050d8:	9303      	str	r3, [sp, #12]
 80050da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050dc:	443b      	add	r3, r7
 80050de:	9309      	str	r3, [sp, #36]	@ 0x24
 80050e0:	e76a      	b.n	8004fb8 <_vfiprintf_r+0x78>
 80050e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80050e6:	460c      	mov	r4, r1
 80050e8:	2001      	movs	r0, #1
 80050ea:	e7a8      	b.n	800503e <_vfiprintf_r+0xfe>
 80050ec:	2300      	movs	r3, #0
 80050ee:	3401      	adds	r4, #1
 80050f0:	9305      	str	r3, [sp, #20]
 80050f2:	4619      	mov	r1, r3
 80050f4:	f04f 0c0a 	mov.w	ip, #10
 80050f8:	4620      	mov	r0, r4
 80050fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050fe:	3a30      	subs	r2, #48	@ 0x30
 8005100:	2a09      	cmp	r2, #9
 8005102:	d903      	bls.n	800510c <_vfiprintf_r+0x1cc>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0c6      	beq.n	8005096 <_vfiprintf_r+0x156>
 8005108:	9105      	str	r1, [sp, #20]
 800510a:	e7c4      	b.n	8005096 <_vfiprintf_r+0x156>
 800510c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005110:	4604      	mov	r4, r0
 8005112:	2301      	movs	r3, #1
 8005114:	e7f0      	b.n	80050f8 <_vfiprintf_r+0x1b8>
 8005116:	ab03      	add	r3, sp, #12
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	462a      	mov	r2, r5
 800511c:	4b12      	ldr	r3, [pc, #72]	@ (8005168 <_vfiprintf_r+0x228>)
 800511e:	a904      	add	r1, sp, #16
 8005120:	4630      	mov	r0, r6
 8005122:	f3af 8000 	nop.w
 8005126:	4607      	mov	r7, r0
 8005128:	1c78      	adds	r0, r7, #1
 800512a:	d1d6      	bne.n	80050da <_vfiprintf_r+0x19a>
 800512c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800512e:	07d9      	lsls	r1, r3, #31
 8005130:	d405      	bmi.n	800513e <_vfiprintf_r+0x1fe>
 8005132:	89ab      	ldrh	r3, [r5, #12]
 8005134:	059a      	lsls	r2, r3, #22
 8005136:	d402      	bmi.n	800513e <_vfiprintf_r+0x1fe>
 8005138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800513a:	f7ff fddd 	bl	8004cf8 <__retarget_lock_release_recursive>
 800513e:	89ab      	ldrh	r3, [r5, #12]
 8005140:	065b      	lsls	r3, r3, #25
 8005142:	f53f af1f 	bmi.w	8004f84 <_vfiprintf_r+0x44>
 8005146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005148:	e71e      	b.n	8004f88 <_vfiprintf_r+0x48>
 800514a:	ab03      	add	r3, sp, #12
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	462a      	mov	r2, r5
 8005150:	4b05      	ldr	r3, [pc, #20]	@ (8005168 <_vfiprintf_r+0x228>)
 8005152:	a904      	add	r1, sp, #16
 8005154:	4630      	mov	r0, r6
 8005156:	f000 f879 	bl	800524c <_printf_i>
 800515a:	e7e4      	b.n	8005126 <_vfiprintf_r+0x1e6>
 800515c:	080057bc 	.word	0x080057bc
 8005160:	080057c6 	.word	0x080057c6
 8005164:	00000000 	.word	0x00000000
 8005168:	08004f1b 	.word	0x08004f1b
 800516c:	080057c2 	.word	0x080057c2

08005170 <_printf_common>:
 8005170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005174:	4616      	mov	r6, r2
 8005176:	4698      	mov	r8, r3
 8005178:	688a      	ldr	r2, [r1, #8]
 800517a:	690b      	ldr	r3, [r1, #16]
 800517c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005180:	4293      	cmp	r3, r2
 8005182:	bfb8      	it	lt
 8005184:	4613      	movlt	r3, r2
 8005186:	6033      	str	r3, [r6, #0]
 8005188:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800518c:	4607      	mov	r7, r0
 800518e:	460c      	mov	r4, r1
 8005190:	b10a      	cbz	r2, 8005196 <_printf_common+0x26>
 8005192:	3301      	adds	r3, #1
 8005194:	6033      	str	r3, [r6, #0]
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	0699      	lsls	r1, r3, #26
 800519a:	bf42      	ittt	mi
 800519c:	6833      	ldrmi	r3, [r6, #0]
 800519e:	3302      	addmi	r3, #2
 80051a0:	6033      	strmi	r3, [r6, #0]
 80051a2:	6825      	ldr	r5, [r4, #0]
 80051a4:	f015 0506 	ands.w	r5, r5, #6
 80051a8:	d106      	bne.n	80051b8 <_printf_common+0x48>
 80051aa:	f104 0a19 	add.w	sl, r4, #25
 80051ae:	68e3      	ldr	r3, [r4, #12]
 80051b0:	6832      	ldr	r2, [r6, #0]
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	42ab      	cmp	r3, r5
 80051b6:	dc26      	bgt.n	8005206 <_printf_common+0x96>
 80051b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051bc:	6822      	ldr	r2, [r4, #0]
 80051be:	3b00      	subs	r3, #0
 80051c0:	bf18      	it	ne
 80051c2:	2301      	movne	r3, #1
 80051c4:	0692      	lsls	r2, r2, #26
 80051c6:	d42b      	bmi.n	8005220 <_printf_common+0xb0>
 80051c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051cc:	4641      	mov	r1, r8
 80051ce:	4638      	mov	r0, r7
 80051d0:	47c8      	blx	r9
 80051d2:	3001      	adds	r0, #1
 80051d4:	d01e      	beq.n	8005214 <_printf_common+0xa4>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	6922      	ldr	r2, [r4, #16]
 80051da:	f003 0306 	and.w	r3, r3, #6
 80051de:	2b04      	cmp	r3, #4
 80051e0:	bf02      	ittt	eq
 80051e2:	68e5      	ldreq	r5, [r4, #12]
 80051e4:	6833      	ldreq	r3, [r6, #0]
 80051e6:	1aed      	subeq	r5, r5, r3
 80051e8:	68a3      	ldr	r3, [r4, #8]
 80051ea:	bf0c      	ite	eq
 80051ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051f0:	2500      	movne	r5, #0
 80051f2:	4293      	cmp	r3, r2
 80051f4:	bfc4      	itt	gt
 80051f6:	1a9b      	subgt	r3, r3, r2
 80051f8:	18ed      	addgt	r5, r5, r3
 80051fa:	2600      	movs	r6, #0
 80051fc:	341a      	adds	r4, #26
 80051fe:	42b5      	cmp	r5, r6
 8005200:	d11a      	bne.n	8005238 <_printf_common+0xc8>
 8005202:	2000      	movs	r0, #0
 8005204:	e008      	b.n	8005218 <_printf_common+0xa8>
 8005206:	2301      	movs	r3, #1
 8005208:	4652      	mov	r2, sl
 800520a:	4641      	mov	r1, r8
 800520c:	4638      	mov	r0, r7
 800520e:	47c8      	blx	r9
 8005210:	3001      	adds	r0, #1
 8005212:	d103      	bne.n	800521c <_printf_common+0xac>
 8005214:	f04f 30ff 	mov.w	r0, #4294967295
 8005218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800521c:	3501      	adds	r5, #1
 800521e:	e7c6      	b.n	80051ae <_printf_common+0x3e>
 8005220:	18e1      	adds	r1, r4, r3
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	2030      	movs	r0, #48	@ 0x30
 8005226:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800522a:	4422      	add	r2, r4
 800522c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005230:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005234:	3302      	adds	r3, #2
 8005236:	e7c7      	b.n	80051c8 <_printf_common+0x58>
 8005238:	2301      	movs	r3, #1
 800523a:	4622      	mov	r2, r4
 800523c:	4641      	mov	r1, r8
 800523e:	4638      	mov	r0, r7
 8005240:	47c8      	blx	r9
 8005242:	3001      	adds	r0, #1
 8005244:	d0e6      	beq.n	8005214 <_printf_common+0xa4>
 8005246:	3601      	adds	r6, #1
 8005248:	e7d9      	b.n	80051fe <_printf_common+0x8e>
	...

0800524c <_printf_i>:
 800524c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005250:	7e0f      	ldrb	r7, [r1, #24]
 8005252:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005254:	2f78      	cmp	r7, #120	@ 0x78
 8005256:	4691      	mov	r9, r2
 8005258:	4680      	mov	r8, r0
 800525a:	460c      	mov	r4, r1
 800525c:	469a      	mov	sl, r3
 800525e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005262:	d807      	bhi.n	8005274 <_printf_i+0x28>
 8005264:	2f62      	cmp	r7, #98	@ 0x62
 8005266:	d80a      	bhi.n	800527e <_printf_i+0x32>
 8005268:	2f00      	cmp	r7, #0
 800526a:	f000 80d1 	beq.w	8005410 <_printf_i+0x1c4>
 800526e:	2f58      	cmp	r7, #88	@ 0x58
 8005270:	f000 80b8 	beq.w	80053e4 <_printf_i+0x198>
 8005274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005278:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800527c:	e03a      	b.n	80052f4 <_printf_i+0xa8>
 800527e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005282:	2b15      	cmp	r3, #21
 8005284:	d8f6      	bhi.n	8005274 <_printf_i+0x28>
 8005286:	a101      	add	r1, pc, #4	@ (adr r1, 800528c <_printf_i+0x40>)
 8005288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800528c:	080052e5 	.word	0x080052e5
 8005290:	080052f9 	.word	0x080052f9
 8005294:	08005275 	.word	0x08005275
 8005298:	08005275 	.word	0x08005275
 800529c:	08005275 	.word	0x08005275
 80052a0:	08005275 	.word	0x08005275
 80052a4:	080052f9 	.word	0x080052f9
 80052a8:	08005275 	.word	0x08005275
 80052ac:	08005275 	.word	0x08005275
 80052b0:	08005275 	.word	0x08005275
 80052b4:	08005275 	.word	0x08005275
 80052b8:	080053f7 	.word	0x080053f7
 80052bc:	08005323 	.word	0x08005323
 80052c0:	080053b1 	.word	0x080053b1
 80052c4:	08005275 	.word	0x08005275
 80052c8:	08005275 	.word	0x08005275
 80052cc:	08005419 	.word	0x08005419
 80052d0:	08005275 	.word	0x08005275
 80052d4:	08005323 	.word	0x08005323
 80052d8:	08005275 	.word	0x08005275
 80052dc:	08005275 	.word	0x08005275
 80052e0:	080053b9 	.word	0x080053b9
 80052e4:	6833      	ldr	r3, [r6, #0]
 80052e6:	1d1a      	adds	r2, r3, #4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6032      	str	r2, [r6, #0]
 80052ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052f4:	2301      	movs	r3, #1
 80052f6:	e09c      	b.n	8005432 <_printf_i+0x1e6>
 80052f8:	6833      	ldr	r3, [r6, #0]
 80052fa:	6820      	ldr	r0, [r4, #0]
 80052fc:	1d19      	adds	r1, r3, #4
 80052fe:	6031      	str	r1, [r6, #0]
 8005300:	0606      	lsls	r6, r0, #24
 8005302:	d501      	bpl.n	8005308 <_printf_i+0xbc>
 8005304:	681d      	ldr	r5, [r3, #0]
 8005306:	e003      	b.n	8005310 <_printf_i+0xc4>
 8005308:	0645      	lsls	r5, r0, #25
 800530a:	d5fb      	bpl.n	8005304 <_printf_i+0xb8>
 800530c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005310:	2d00      	cmp	r5, #0
 8005312:	da03      	bge.n	800531c <_printf_i+0xd0>
 8005314:	232d      	movs	r3, #45	@ 0x2d
 8005316:	426d      	negs	r5, r5
 8005318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800531c:	4858      	ldr	r0, [pc, #352]	@ (8005480 <_printf_i+0x234>)
 800531e:	230a      	movs	r3, #10
 8005320:	e011      	b.n	8005346 <_printf_i+0xfa>
 8005322:	6821      	ldr	r1, [r4, #0]
 8005324:	6833      	ldr	r3, [r6, #0]
 8005326:	0608      	lsls	r0, r1, #24
 8005328:	f853 5b04 	ldr.w	r5, [r3], #4
 800532c:	d402      	bmi.n	8005334 <_printf_i+0xe8>
 800532e:	0649      	lsls	r1, r1, #25
 8005330:	bf48      	it	mi
 8005332:	b2ad      	uxthmi	r5, r5
 8005334:	2f6f      	cmp	r7, #111	@ 0x6f
 8005336:	4852      	ldr	r0, [pc, #328]	@ (8005480 <_printf_i+0x234>)
 8005338:	6033      	str	r3, [r6, #0]
 800533a:	bf14      	ite	ne
 800533c:	230a      	movne	r3, #10
 800533e:	2308      	moveq	r3, #8
 8005340:	2100      	movs	r1, #0
 8005342:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005346:	6866      	ldr	r6, [r4, #4]
 8005348:	60a6      	str	r6, [r4, #8]
 800534a:	2e00      	cmp	r6, #0
 800534c:	db05      	blt.n	800535a <_printf_i+0x10e>
 800534e:	6821      	ldr	r1, [r4, #0]
 8005350:	432e      	orrs	r6, r5
 8005352:	f021 0104 	bic.w	r1, r1, #4
 8005356:	6021      	str	r1, [r4, #0]
 8005358:	d04b      	beq.n	80053f2 <_printf_i+0x1a6>
 800535a:	4616      	mov	r6, r2
 800535c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005360:	fb03 5711 	mls	r7, r3, r1, r5
 8005364:	5dc7      	ldrb	r7, [r0, r7]
 8005366:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800536a:	462f      	mov	r7, r5
 800536c:	42bb      	cmp	r3, r7
 800536e:	460d      	mov	r5, r1
 8005370:	d9f4      	bls.n	800535c <_printf_i+0x110>
 8005372:	2b08      	cmp	r3, #8
 8005374:	d10b      	bne.n	800538e <_printf_i+0x142>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	07df      	lsls	r7, r3, #31
 800537a:	d508      	bpl.n	800538e <_printf_i+0x142>
 800537c:	6923      	ldr	r3, [r4, #16]
 800537e:	6861      	ldr	r1, [r4, #4]
 8005380:	4299      	cmp	r1, r3
 8005382:	bfde      	ittt	le
 8005384:	2330      	movle	r3, #48	@ 0x30
 8005386:	f806 3c01 	strble.w	r3, [r6, #-1]
 800538a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800538e:	1b92      	subs	r2, r2, r6
 8005390:	6122      	str	r2, [r4, #16]
 8005392:	f8cd a000 	str.w	sl, [sp]
 8005396:	464b      	mov	r3, r9
 8005398:	aa03      	add	r2, sp, #12
 800539a:	4621      	mov	r1, r4
 800539c:	4640      	mov	r0, r8
 800539e:	f7ff fee7 	bl	8005170 <_printf_common>
 80053a2:	3001      	adds	r0, #1
 80053a4:	d14a      	bne.n	800543c <_printf_i+0x1f0>
 80053a6:	f04f 30ff 	mov.w	r0, #4294967295
 80053aa:	b004      	add	sp, #16
 80053ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	f043 0320 	orr.w	r3, r3, #32
 80053b6:	6023      	str	r3, [r4, #0]
 80053b8:	4832      	ldr	r0, [pc, #200]	@ (8005484 <_printf_i+0x238>)
 80053ba:	2778      	movs	r7, #120	@ 0x78
 80053bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	6831      	ldr	r1, [r6, #0]
 80053c4:	061f      	lsls	r7, r3, #24
 80053c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80053ca:	d402      	bmi.n	80053d2 <_printf_i+0x186>
 80053cc:	065f      	lsls	r7, r3, #25
 80053ce:	bf48      	it	mi
 80053d0:	b2ad      	uxthmi	r5, r5
 80053d2:	6031      	str	r1, [r6, #0]
 80053d4:	07d9      	lsls	r1, r3, #31
 80053d6:	bf44      	itt	mi
 80053d8:	f043 0320 	orrmi.w	r3, r3, #32
 80053dc:	6023      	strmi	r3, [r4, #0]
 80053de:	b11d      	cbz	r5, 80053e8 <_printf_i+0x19c>
 80053e0:	2310      	movs	r3, #16
 80053e2:	e7ad      	b.n	8005340 <_printf_i+0xf4>
 80053e4:	4826      	ldr	r0, [pc, #152]	@ (8005480 <_printf_i+0x234>)
 80053e6:	e7e9      	b.n	80053bc <_printf_i+0x170>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	f023 0320 	bic.w	r3, r3, #32
 80053ee:	6023      	str	r3, [r4, #0]
 80053f0:	e7f6      	b.n	80053e0 <_printf_i+0x194>
 80053f2:	4616      	mov	r6, r2
 80053f4:	e7bd      	b.n	8005372 <_printf_i+0x126>
 80053f6:	6833      	ldr	r3, [r6, #0]
 80053f8:	6825      	ldr	r5, [r4, #0]
 80053fa:	6961      	ldr	r1, [r4, #20]
 80053fc:	1d18      	adds	r0, r3, #4
 80053fe:	6030      	str	r0, [r6, #0]
 8005400:	062e      	lsls	r6, r5, #24
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	d501      	bpl.n	800540a <_printf_i+0x1be>
 8005406:	6019      	str	r1, [r3, #0]
 8005408:	e002      	b.n	8005410 <_printf_i+0x1c4>
 800540a:	0668      	lsls	r0, r5, #25
 800540c:	d5fb      	bpl.n	8005406 <_printf_i+0x1ba>
 800540e:	8019      	strh	r1, [r3, #0]
 8005410:	2300      	movs	r3, #0
 8005412:	6123      	str	r3, [r4, #16]
 8005414:	4616      	mov	r6, r2
 8005416:	e7bc      	b.n	8005392 <_printf_i+0x146>
 8005418:	6833      	ldr	r3, [r6, #0]
 800541a:	1d1a      	adds	r2, r3, #4
 800541c:	6032      	str	r2, [r6, #0]
 800541e:	681e      	ldr	r6, [r3, #0]
 8005420:	6862      	ldr	r2, [r4, #4]
 8005422:	2100      	movs	r1, #0
 8005424:	4630      	mov	r0, r6
 8005426:	f7fa fedb 	bl	80001e0 <memchr>
 800542a:	b108      	cbz	r0, 8005430 <_printf_i+0x1e4>
 800542c:	1b80      	subs	r0, r0, r6
 800542e:	6060      	str	r0, [r4, #4]
 8005430:	6863      	ldr	r3, [r4, #4]
 8005432:	6123      	str	r3, [r4, #16]
 8005434:	2300      	movs	r3, #0
 8005436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800543a:	e7aa      	b.n	8005392 <_printf_i+0x146>
 800543c:	6923      	ldr	r3, [r4, #16]
 800543e:	4632      	mov	r2, r6
 8005440:	4649      	mov	r1, r9
 8005442:	4640      	mov	r0, r8
 8005444:	47d0      	blx	sl
 8005446:	3001      	adds	r0, #1
 8005448:	d0ad      	beq.n	80053a6 <_printf_i+0x15a>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	079b      	lsls	r3, r3, #30
 800544e:	d413      	bmi.n	8005478 <_printf_i+0x22c>
 8005450:	68e0      	ldr	r0, [r4, #12]
 8005452:	9b03      	ldr	r3, [sp, #12]
 8005454:	4298      	cmp	r0, r3
 8005456:	bfb8      	it	lt
 8005458:	4618      	movlt	r0, r3
 800545a:	e7a6      	b.n	80053aa <_printf_i+0x15e>
 800545c:	2301      	movs	r3, #1
 800545e:	4632      	mov	r2, r6
 8005460:	4649      	mov	r1, r9
 8005462:	4640      	mov	r0, r8
 8005464:	47d0      	blx	sl
 8005466:	3001      	adds	r0, #1
 8005468:	d09d      	beq.n	80053a6 <_printf_i+0x15a>
 800546a:	3501      	adds	r5, #1
 800546c:	68e3      	ldr	r3, [r4, #12]
 800546e:	9903      	ldr	r1, [sp, #12]
 8005470:	1a5b      	subs	r3, r3, r1
 8005472:	42ab      	cmp	r3, r5
 8005474:	dcf2      	bgt.n	800545c <_printf_i+0x210>
 8005476:	e7eb      	b.n	8005450 <_printf_i+0x204>
 8005478:	2500      	movs	r5, #0
 800547a:	f104 0619 	add.w	r6, r4, #25
 800547e:	e7f5      	b.n	800546c <_printf_i+0x220>
 8005480:	080057cd 	.word	0x080057cd
 8005484:	080057de 	.word	0x080057de

08005488 <__sflush_r>:
 8005488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800548c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005490:	0716      	lsls	r6, r2, #28
 8005492:	4605      	mov	r5, r0
 8005494:	460c      	mov	r4, r1
 8005496:	d454      	bmi.n	8005542 <__sflush_r+0xba>
 8005498:	684b      	ldr	r3, [r1, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	dc02      	bgt.n	80054a4 <__sflush_r+0x1c>
 800549e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	dd48      	ble.n	8005536 <__sflush_r+0xae>
 80054a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054a6:	2e00      	cmp	r6, #0
 80054a8:	d045      	beq.n	8005536 <__sflush_r+0xae>
 80054aa:	2300      	movs	r3, #0
 80054ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80054b0:	682f      	ldr	r7, [r5, #0]
 80054b2:	6a21      	ldr	r1, [r4, #32]
 80054b4:	602b      	str	r3, [r5, #0]
 80054b6:	d030      	beq.n	800551a <__sflush_r+0x92>
 80054b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	0759      	lsls	r1, r3, #29
 80054be:	d505      	bpl.n	80054cc <__sflush_r+0x44>
 80054c0:	6863      	ldr	r3, [r4, #4]
 80054c2:	1ad2      	subs	r2, r2, r3
 80054c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80054c6:	b10b      	cbz	r3, 80054cc <__sflush_r+0x44>
 80054c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054ca:	1ad2      	subs	r2, r2, r3
 80054cc:	2300      	movs	r3, #0
 80054ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054d0:	6a21      	ldr	r1, [r4, #32]
 80054d2:	4628      	mov	r0, r5
 80054d4:	47b0      	blx	r6
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	d106      	bne.n	80054ea <__sflush_r+0x62>
 80054dc:	6829      	ldr	r1, [r5, #0]
 80054de:	291d      	cmp	r1, #29
 80054e0:	d82b      	bhi.n	800553a <__sflush_r+0xb2>
 80054e2:	4a2a      	ldr	r2, [pc, #168]	@ (800558c <__sflush_r+0x104>)
 80054e4:	40ca      	lsrs	r2, r1
 80054e6:	07d6      	lsls	r6, r2, #31
 80054e8:	d527      	bpl.n	800553a <__sflush_r+0xb2>
 80054ea:	2200      	movs	r2, #0
 80054ec:	6062      	str	r2, [r4, #4]
 80054ee:	04d9      	lsls	r1, r3, #19
 80054f0:	6922      	ldr	r2, [r4, #16]
 80054f2:	6022      	str	r2, [r4, #0]
 80054f4:	d504      	bpl.n	8005500 <__sflush_r+0x78>
 80054f6:	1c42      	adds	r2, r0, #1
 80054f8:	d101      	bne.n	80054fe <__sflush_r+0x76>
 80054fa:	682b      	ldr	r3, [r5, #0]
 80054fc:	b903      	cbnz	r3, 8005500 <__sflush_r+0x78>
 80054fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8005500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005502:	602f      	str	r7, [r5, #0]
 8005504:	b1b9      	cbz	r1, 8005536 <__sflush_r+0xae>
 8005506:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800550a:	4299      	cmp	r1, r3
 800550c:	d002      	beq.n	8005514 <__sflush_r+0x8c>
 800550e:	4628      	mov	r0, r5
 8005510:	f7ff fbf4 	bl	8004cfc <_free_r>
 8005514:	2300      	movs	r3, #0
 8005516:	6363      	str	r3, [r4, #52]	@ 0x34
 8005518:	e00d      	b.n	8005536 <__sflush_r+0xae>
 800551a:	2301      	movs	r3, #1
 800551c:	4628      	mov	r0, r5
 800551e:	47b0      	blx	r6
 8005520:	4602      	mov	r2, r0
 8005522:	1c50      	adds	r0, r2, #1
 8005524:	d1c9      	bne.n	80054ba <__sflush_r+0x32>
 8005526:	682b      	ldr	r3, [r5, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0c6      	beq.n	80054ba <__sflush_r+0x32>
 800552c:	2b1d      	cmp	r3, #29
 800552e:	d001      	beq.n	8005534 <__sflush_r+0xac>
 8005530:	2b16      	cmp	r3, #22
 8005532:	d11e      	bne.n	8005572 <__sflush_r+0xea>
 8005534:	602f      	str	r7, [r5, #0]
 8005536:	2000      	movs	r0, #0
 8005538:	e022      	b.n	8005580 <__sflush_r+0xf8>
 800553a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800553e:	b21b      	sxth	r3, r3
 8005540:	e01b      	b.n	800557a <__sflush_r+0xf2>
 8005542:	690f      	ldr	r7, [r1, #16]
 8005544:	2f00      	cmp	r7, #0
 8005546:	d0f6      	beq.n	8005536 <__sflush_r+0xae>
 8005548:	0793      	lsls	r3, r2, #30
 800554a:	680e      	ldr	r6, [r1, #0]
 800554c:	bf08      	it	eq
 800554e:	694b      	ldreq	r3, [r1, #20]
 8005550:	600f      	str	r7, [r1, #0]
 8005552:	bf18      	it	ne
 8005554:	2300      	movne	r3, #0
 8005556:	eba6 0807 	sub.w	r8, r6, r7
 800555a:	608b      	str	r3, [r1, #8]
 800555c:	f1b8 0f00 	cmp.w	r8, #0
 8005560:	dde9      	ble.n	8005536 <__sflush_r+0xae>
 8005562:	6a21      	ldr	r1, [r4, #32]
 8005564:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005566:	4643      	mov	r3, r8
 8005568:	463a      	mov	r2, r7
 800556a:	4628      	mov	r0, r5
 800556c:	47b0      	blx	r6
 800556e:	2800      	cmp	r0, #0
 8005570:	dc08      	bgt.n	8005584 <__sflush_r+0xfc>
 8005572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800557a:	81a3      	strh	r3, [r4, #12]
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005584:	4407      	add	r7, r0
 8005586:	eba8 0800 	sub.w	r8, r8, r0
 800558a:	e7e7      	b.n	800555c <__sflush_r+0xd4>
 800558c:	20400001 	.word	0x20400001

08005590 <_fflush_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	690b      	ldr	r3, [r1, #16]
 8005594:	4605      	mov	r5, r0
 8005596:	460c      	mov	r4, r1
 8005598:	b913      	cbnz	r3, 80055a0 <_fflush_r+0x10>
 800559a:	2500      	movs	r5, #0
 800559c:	4628      	mov	r0, r5
 800559e:	bd38      	pop	{r3, r4, r5, pc}
 80055a0:	b118      	cbz	r0, 80055aa <_fflush_r+0x1a>
 80055a2:	6a03      	ldr	r3, [r0, #32]
 80055a4:	b90b      	cbnz	r3, 80055aa <_fflush_r+0x1a>
 80055a6:	f7ff f9af 	bl	8004908 <__sinit>
 80055aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0f3      	beq.n	800559a <_fflush_r+0xa>
 80055b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80055b4:	07d0      	lsls	r0, r2, #31
 80055b6:	d404      	bmi.n	80055c2 <_fflush_r+0x32>
 80055b8:	0599      	lsls	r1, r3, #22
 80055ba:	d402      	bmi.n	80055c2 <_fflush_r+0x32>
 80055bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055be:	f7ff fb9a 	bl	8004cf6 <__retarget_lock_acquire_recursive>
 80055c2:	4628      	mov	r0, r5
 80055c4:	4621      	mov	r1, r4
 80055c6:	f7ff ff5f 	bl	8005488 <__sflush_r>
 80055ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055cc:	07da      	lsls	r2, r3, #31
 80055ce:	4605      	mov	r5, r0
 80055d0:	d4e4      	bmi.n	800559c <_fflush_r+0xc>
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	059b      	lsls	r3, r3, #22
 80055d6:	d4e1      	bmi.n	800559c <_fflush_r+0xc>
 80055d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055da:	f7ff fb8d 	bl	8004cf8 <__retarget_lock_release_recursive>
 80055de:	e7dd      	b.n	800559c <_fflush_r+0xc>

080055e0 <__swhatbuf_r>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	460c      	mov	r4, r1
 80055e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e8:	2900      	cmp	r1, #0
 80055ea:	b096      	sub	sp, #88	@ 0x58
 80055ec:	4615      	mov	r5, r2
 80055ee:	461e      	mov	r6, r3
 80055f0:	da0d      	bge.n	800560e <__swhatbuf_r+0x2e>
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055f8:	f04f 0100 	mov.w	r1, #0
 80055fc:	bf14      	ite	ne
 80055fe:	2340      	movne	r3, #64	@ 0x40
 8005600:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005604:	2000      	movs	r0, #0
 8005606:	6031      	str	r1, [r6, #0]
 8005608:	602b      	str	r3, [r5, #0]
 800560a:	b016      	add	sp, #88	@ 0x58
 800560c:	bd70      	pop	{r4, r5, r6, pc}
 800560e:	466a      	mov	r2, sp
 8005610:	f000 f848 	bl	80056a4 <_fstat_r>
 8005614:	2800      	cmp	r0, #0
 8005616:	dbec      	blt.n	80055f2 <__swhatbuf_r+0x12>
 8005618:	9901      	ldr	r1, [sp, #4]
 800561a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800561e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005622:	4259      	negs	r1, r3
 8005624:	4159      	adcs	r1, r3
 8005626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800562a:	e7eb      	b.n	8005604 <__swhatbuf_r+0x24>

0800562c <__smakebuf_r>:
 800562c:	898b      	ldrh	r3, [r1, #12]
 800562e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005630:	079d      	lsls	r5, r3, #30
 8005632:	4606      	mov	r6, r0
 8005634:	460c      	mov	r4, r1
 8005636:	d507      	bpl.n	8005648 <__smakebuf_r+0x1c>
 8005638:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	6123      	str	r3, [r4, #16]
 8005640:	2301      	movs	r3, #1
 8005642:	6163      	str	r3, [r4, #20]
 8005644:	b003      	add	sp, #12
 8005646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005648:	ab01      	add	r3, sp, #4
 800564a:	466a      	mov	r2, sp
 800564c:	f7ff ffc8 	bl	80055e0 <__swhatbuf_r>
 8005650:	9f00      	ldr	r7, [sp, #0]
 8005652:	4605      	mov	r5, r0
 8005654:	4639      	mov	r1, r7
 8005656:	4630      	mov	r0, r6
 8005658:	f7ff fbbc 	bl	8004dd4 <_malloc_r>
 800565c:	b948      	cbnz	r0, 8005672 <__smakebuf_r+0x46>
 800565e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005662:	059a      	lsls	r2, r3, #22
 8005664:	d4ee      	bmi.n	8005644 <__smakebuf_r+0x18>
 8005666:	f023 0303 	bic.w	r3, r3, #3
 800566a:	f043 0302 	orr.w	r3, r3, #2
 800566e:	81a3      	strh	r3, [r4, #12]
 8005670:	e7e2      	b.n	8005638 <__smakebuf_r+0xc>
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	6020      	str	r0, [r4, #0]
 8005676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800567a:	81a3      	strh	r3, [r4, #12]
 800567c:	9b01      	ldr	r3, [sp, #4]
 800567e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005682:	b15b      	cbz	r3, 800569c <__smakebuf_r+0x70>
 8005684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005688:	4630      	mov	r0, r6
 800568a:	f000 f81d 	bl	80056c8 <_isatty_r>
 800568e:	b128      	cbz	r0, 800569c <__smakebuf_r+0x70>
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	f023 0303 	bic.w	r3, r3, #3
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	81a3      	strh	r3, [r4, #12]
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	431d      	orrs	r5, r3
 80056a0:	81a5      	strh	r5, [r4, #12]
 80056a2:	e7cf      	b.n	8005644 <__smakebuf_r+0x18>

080056a4 <_fstat_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4d07      	ldr	r5, [pc, #28]	@ (80056c4 <_fstat_r+0x20>)
 80056a8:	2300      	movs	r3, #0
 80056aa:	4604      	mov	r4, r0
 80056ac:	4608      	mov	r0, r1
 80056ae:	4611      	mov	r1, r2
 80056b0:	602b      	str	r3, [r5, #0]
 80056b2:	f7fb fb06 	bl	8000cc2 <_fstat>
 80056b6:	1c43      	adds	r3, r0, #1
 80056b8:	d102      	bne.n	80056c0 <_fstat_r+0x1c>
 80056ba:	682b      	ldr	r3, [r5, #0]
 80056bc:	b103      	cbz	r3, 80056c0 <_fstat_r+0x1c>
 80056be:	6023      	str	r3, [r4, #0]
 80056c0:	bd38      	pop	{r3, r4, r5, pc}
 80056c2:	bf00      	nop
 80056c4:	20000268 	.word	0x20000268

080056c8 <_isatty_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4d06      	ldr	r5, [pc, #24]	@ (80056e4 <_isatty_r+0x1c>)
 80056cc:	2300      	movs	r3, #0
 80056ce:	4604      	mov	r4, r0
 80056d0:	4608      	mov	r0, r1
 80056d2:	602b      	str	r3, [r5, #0]
 80056d4:	f7fb fb05 	bl	8000ce2 <_isatty>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d102      	bne.n	80056e2 <_isatty_r+0x1a>
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	b103      	cbz	r3, 80056e2 <_isatty_r+0x1a>
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	20000268 	.word	0x20000268

080056e8 <_sbrk_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4d06      	ldr	r5, [pc, #24]	@ (8005704 <_sbrk_r+0x1c>)
 80056ec:	2300      	movs	r3, #0
 80056ee:	4604      	mov	r4, r0
 80056f0:	4608      	mov	r0, r1
 80056f2:	602b      	str	r3, [r5, #0]
 80056f4:	f7fb fb0e 	bl	8000d14 <_sbrk>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d102      	bne.n	8005702 <_sbrk_r+0x1a>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	b103      	cbz	r3, 8005702 <_sbrk_r+0x1a>
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	bd38      	pop	{r3, r4, r5, pc}
 8005704:	20000268 	.word	0x20000268

08005708 <_init>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	bf00      	nop
 800570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570e:	bc08      	pop	{r3}
 8005710:	469e      	mov	lr, r3
 8005712:	4770      	bx	lr

08005714 <_fini>:
 8005714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005716:	bf00      	nop
 8005718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571a:	bc08      	pop	{r3}
 800571c:	469e      	mov	lr, r3
 800571e:	4770      	bx	lr
